<project name="build-ws" default="all" basedir=".">
    <property file="build.properties" />
	<!--target name="all"  depends="clean, cvs-fetch, build-pca, build-jars, copy-files, deploy-extensions, build-ear" description="Executes all the targets" /-->
	<target name="all"  depends="deploy-extensions, build-ear" />
	<path id="implementation.class.path">
		<fileset dir="${devhome}/Foundation/jar/entities/">
			<include name="**/*.jar" /> 
		</fileset>		
		<fileset dir="${devhome}/Foundation/jar/prerelease/smcfs">
			<include name="**/*.jar" /> 
		</fileset>	
	 	<fileset dir="${INSTALL_DIR}/jar/smcfs">
			<include name="**/*.jar"/>
		</fileset>
		<fileset dir="${INSTALL_DIR}/jar/platform_afc">
			<include name="**/*.jar"/>
		</fileset>
		<fileset dir="${INSTALL_DIR}/jar/platform">
			<include name="**/*.jar"/>
		</fileset>
		<fileset dir="${INSTALL_DIR}/jar/log4j">
			<include name="**/*.jar"/>
		</fileset>
		<fileset dir="${INSTALL_DIR}/jar/COM_Add-in">
			<include name="**/*.jar"/>
		</fileset>
		<fileset dir="${INSTALL_DIR}/repository/eardata/platform/war/yfscommon">
			<include name="**/*.jar"/>
		</fileset>
		<fileset dir="${INSTALL_DIR}/jar/platform_afc_ui_impl">
			<include name="**/*.jar"/>
		</fileset>	
		<fileset dir="${INSTALL_DIR}/jar/scecore/9.0">
			<include name="**/*.jar"/>
		</fileset>			
		<fileset dir="${INSTALL_DIR}/installed_data/SOP/jars/SOP">
				<include name="**/*.jar"/>
		</fileset>
		<!--fileset dir="${INSTALL_DIR}/jar">
			<include name="**/*.jar"/>
		</fileset-->
	</path>

	<!--Added Classpath for PCA components-->
	<path id="pca.class.path">
		<!--<fileset dir="${INSTALL_DIR}/resources/lib" includes="**/*.jar"/>-->
	    <fileset dir="${INSTALL_DIR}/rcp/SOP/9.1/platform/rcpdependencies/windows/eclipse/plugins" includes="**/*.jar"/>
		<fileset dir="${INSTALL_DIR}/jar/SOP/9.1" includes="**/*.jar"/>
		<fileset dir="${INSTALL_DIR}/lib" includes="**/*.jar"/>	
		<fileset dir="${INSTALL_DIR}/dist/reqdplugins" includes="**/*.jar"/>
		<fileset dir="${INSTALL_DIR}/dist/rcpdrop/plugins/" includes="**/*.jar"/>
		<fileset dir="${pca.extn.folder}/plugins/${pca.plugin.id}/lib/" includes="**/*.jar"/>
	 </path>

	<!--<taskdef resource="checkstyletask.properties"
         classpath="${INSTALL_DIR}/jar/checkstyle-all-4.4.jar"/>-->

	<path id="project.class.path">
		<path refid="implementation.class.path" />
	</path>

	<!-- Cleans the custom code in INSTALL_DIR -->
	<target name="clean" description="Deletes directories" >
    	<!-- Delete directories -->
        <!--
    	<delete dir="${INSTALL_DIR}/extensions/global" />		
        <delete dir="${INSTALL_DIR}"/>
        -->
    	<!-- Re-create directories -->
        <!--
        <mkdir dir="${INSTALL_DIR}"/-->
       	<mkdir dir="${INSTALL_DIR}/dist" />
		<echo>CLEAN Target complete!</echo>
	</target>

	<!-- Fetches the KOHLS modules from CVS respository
	<target name="cvs-fetch"  description="Fetches from CVS">
		 First create the CVS fetch directory
		<mkdir dir="${cvs.fetch.dir}"/>
        <cvs cvsRoot=":pserver:${cvs.user}:${cvs.pass}@${cvs.server}:${cvs.root}" package="${cvs.module.name}" dest="${cvs.fetch.dir}" tag="${cvs.tag}" />
	</target>   
	-->

	<target name="checkstyle" description="Generates a report of code convention violations.">
	  <checkstyle config="${INSTALL_DIR}/jar/KOHLS_Checks.xml" failureProperty="checkstyle.failure" failOnViolation="false">
		<formatter type="xml" tofile="checkstyle_report.xml"/>
		<fileset dir="${INSTALL_DIR}/src" includes="**/*.java"/>
	  </checkstyle>

	  <style in="checkstyle_report.xml" out="checkstyle_report.html" style="${INSTALL_DIR}/jar/checkstyle.xsl"/>
	</target>

	<target name="mail" depends="checkstyle" description="Sends email after build">
		<antcall target="mail-with-checkstyle-errors" />
		<antcall target="mail-without-checkstyle-errors" />
        <delete file="checkstyle_report.html"/>
        <delete file="checkstyle_report.xml"/>
	</target>

	<target name="mail-with-checkstyle-errors" if="checkstyle.failure"  >
	  	<mail from="build@KOHLS.com"
			tolist="${checkstyle.maillist}"
			mailhost="iwblrcormsg001.sci.local"
			subject="Checkstyle violation(s) in project ${project.name}"
			files="checkstyle_report.html, build.log"/>
	</target>

	<target name="mail-without-checkstyle-errors" unless="checkstyle.failure"  >
	  	<mail from="build@KOHLS.com"
			tolist="${checkstyle.maillist}"
			mailhost="iwblrcormsg001.sci.local"
			subject="No CheckStyle  violation(s) in project ${project.name}"
			files="build.log"/>
	</target>

 	<target name="copy-files" description="Deploys the project files in the relevant folders of MCF Installation">
		<!--Copy templates-->
        <echo>Copy the project specific repository to repository folder of APP</echo>
        <!--copy todir="${INSTALL_DIR}/repository/">
			<fileset dir="${INSTALL_DIR}/repository">
				<exclude name="**/CVS" />
			</fileset>
		</copy-->

		<!--Copy resources-->
        <echo>Copy the project specific resources to resources folder of APP</echo>
        <copy todir="${INSTALL_DIR}/resources/">
			<fileset dir="${INSTALL_DIR}/resources">
				<exclude name="**/CVS" />
			</fileset>
		</copy>
		<!--Copy extensions-->
        <echo>Copy the project specific extensions to extensions folder of APP</echo>
		<copy todir="${INSTALL_DIR}/extensions/" overwrite="true">
			<fileset dir="${INSTALL_DIR}/extensions">
				<exclude name="**/CVS" />
			</fileset>
		</copy>

		<!--Copy SQLs-->
		<echo>Copy the project specific view creation SQLs to customDBViews folder of APP</echo>

		<!--copy todir="${INSTALL_DIR}/database/oracle/scripts/CustomDBViews/" overwrite="true">
			<fileset dir="${INSTALL_DIR}/database/oracle/scripts/CustomDBViews">
				<exclude name="**/CVS" />
			</fileset>
		</copy-->
	</target>

	<target name="deploy-extensions" description="Deploys extensions on MCF app">		
		<exec executable="${INSTALL_DIR}/bin/install3rdParty.cmd" failonerror="true">
			  <arg value="KOHLS"/>
			  <arg value="1"/>
			  <arg value="-j"/>
			  <arg value="${INSTALL_DIR}/dist/Foundation/${project.name}.jar"/>
			  <arg value="-targetJVM"/>
			  <arg value="APP"/>
		</exec>					

		<!--exec executable="${INSTALL_DIR}/bin/install3rdParty.cmd" failonerror="true">
			  <arg value="KOHLS"/>
			  <arg value="1"/>
			  <arg value="-j"/>
			   <arg value="${INSTALL_DIR}/dist/Foundation/${project.name}.jar"/>
			  <arg value="-targetJVM"/>
			  <arg value="AGENT"/>
		</exec-->	

		<!--exec executable="${INSTALL_DIR}/bin/install3rdParty.cmd" failonerror="true">
			  <arg value="KOHLS"/>
			  <arg value="1"/>
			  <arg value="-j"/>
			  <arg value="${INSTALL_DIR}/dist/Foundation/${project.name}jasper.jar"/>
			  <arg value="-targetJVM"/>
			  <arg value="APP"/>
		</exec-->					

		<!--exec executable="${INSTALL_DIR}/bin/install3rdParty.cmd" failonerror="true">
			  <arg value="KOHLS"/>
			  <arg value="1"/>
			  <arg value="-j"/>
			  <arg value="${INSTALL_DIR}/dist/Foundation/${project.name}jasper.jar"/>
			  <arg value="-targetJVM"/>
              <arg value="AGENT"/>
        </exec-->	

        <exec executable="${INSTALL_DIR}/bin/deployer.cmd" failonerror="true">
        	<arg value="-t"/>
        	<arg value="resourcejar"/>
		</exec>

		<exec executable="${INSTALL_DIR}/bin/deployer.cmd" failonerror="true">
			<arg value="-t"/>
			<arg value="entitydeployer"/>
		</exec>

	</target>

	<target name="build-ear" description="Builds EAR file for deployment">		
		<exec executable="${INSTALL_DIR}/bin/buildear.cmd">
			<arg value="-Dappserver=websphere"/>
			<arg value="-Dwarfiles=smcfs,sma,sbc"/>
			<arg value="-Dearfile=smcfs.ear"/>
			<!--arg value="-Dnodocear=true"/-->
			<arg value="-Ddevmode=true"/>	
			<arg value="-Dnowebservice=true"/>
			<arg value="create-ear"/>							  
		</exec>
	</target>

	<target name="make-release">
		<delete dir="${release.dir}"/>
		<mkdir dir="${release.dir}" />
		<mkdir dir="${release.dir}/temp" />
		<mkdir dir="${release.dir}/temp/src" />
        <mkdir dir="${release.dir}/temp/PCAExtensions" />
        <mkdir dir="${release.dir}/temp/PCAExtensions/plugins" />
		<mkdir dir="${release.dir}/temp/Foundation" />
		<mkdir dir="${release.dir}/temp/Foundation/repository" />
		<mkdir dir="${release.dir}/temp/Foundation/resources" />
		<mkdir dir="${release.dir}/temp/Foundation/extensions" />
		<mkdir dir="${release.dir}/temp/Foundation/jar" />
		<mkdir dir="${release.dir}/temp/resources" />
		<mkdir dir="${release.dir}/temp/resources/lib" />
		<mkdir dir="${release.dir}/temp/resources/jasper" />
		<mkdir dir="${release.dir}/temp/JasperReports" />
		<copy todir="${release.dir}/temp/src/com">
			<fileset dir="${INSTALL_DIR}/src/com">
				<exclude name="**/CVS" />
				<exclude name="**/dummy.txt" />
			</fileset>
		</copy>
        <copy todir="${release.dir}/temp/PCAExtensions/plugins">
        	<fileset dir="${INSTALL_DIR}/PCAExtensions/plugins">
        	<exclude name="**/CVS" />
        	<exclude name="**/dummy.txt" />
        	</fileset>
        </copy>
		<copy todir="${release.dir}/temp/Foundation/repository">
			<fileset dir="${INSTALL_DIR}/repository">
				<exclude name="**/CVS" />
				<exclude name="**/dummy.txt" />
			</fileset>
		</copy>
        <copy todir="${release.dir}/temp/Foundation/resources">
			<fileset dir="${INSTALL_DIR}/resources">
				<exclude name="**/CVS" />
				<exclude name="**/dummy.txt" />
			</fileset>
		</copy>
        <copy todir="${release.dir}/temp/Foundation/jar">
			<fileset dir="${INSTALL_DIR}/jar">
				<exclude name="**/CVS" />
				<exclude name="**/dummy.txt" />
				<exclude name="**/checkstyle.xsl" />
				<exclude name="**/checkstyle-all-4.4.jar" />
				<exclude name="**/KOHLS_Checks.xml" />
			</fileset>
		</copy>
        <copy todir="${release.dir}/temp/Foundation/extensions">
			<fileset dir="${INSTALL_DIR}/extensions">
				<exclude name="**/CVS" />
				<exclude name="**/dummy.txt" />
			</fileset>
		</copy>
		<copy todir="${release.dir}/temp/resources/lib/jasper">
			<fileset dir="${INSTALL_DIR}/resources/lib/jasper">
				<exclude name="**/CVS" />
				<exclude name="**/dummy.txt" />
			</fileset>
		</copy>
		<copy todir="${release.dir}/temp/JasperReports">
			<fileset dir="${INSTALL_DIR}/JasperReports">
				<exclude name="**/CVS" />
				<exclude name="**/dummy.txt" />
			</fileset>
		</copy>
		<zip destfile="${release.dir}/Source.zip" basedir="${release.dir}/temp" >
			<exclude name="**/CVS" />
			<exclude name="**/dummy.txt" />
		</zip>
	</target>

	<!--Start: Added for building PCA components-->
	<target name="jar-plugin-clients"  description="Compile client java code and builds jar." depends="extract-rcp-clients">
		<echo>Compiling SOP classes from KOHLS</echo>
		<echo>Start of creating ${pca.plugin.id}.jar</echo>
		<macro-build-pca-classes pluginid="${pca.plugin.id}"/>
		<macro-jar-pca-client pluginid="${pca.plugin.id}" version="${pca.plugin.version}"/>
	</target>

	<target name="prepare-rcp-extn-folder">
		<delete dir="${INSTALL_DIR}/dist/rcpdrop" />
		<mkdir dir="${INSTALL_DIR}/dist/rcpdrop/plugins" />
		<copy todir="${INSTALL_DIR}/dist/rcpdrop/truststore">
			<fileset dir="${pca.extn.folder}/truststore">
				<exclude name="**/CVS/**"/>
			</fileset>
		</copy>
		<copy todir="${INSTALL_DIR}/dist/rcpdrop/resources">
			<fileset dir="${pca.extn.folder}/resources">
				<exclude name="**/CVS/**"/>
			</fileset>
		</copy>
	</target>

	<target name="copy-custom-plugins">
	<!--	<delete dir="${pca.extn.folder}/plugins" />
		<mkdir dir="${pca.extn.folder}/plugins" />
		<copy todir="${pca.extn.folder}/plugins">
			<fileset dir="${INSTALL_DIR}/dist/rcpdrop/plugins">
			</fileset>
		</copy>
    -->
    </target>

	<target name="replace-appid">
		<replace file="${pca.extn.folder}/plugins/${pca.plugin.id}/${pca.plugin.id}_extn.yuix" token="YFSSYS00006" value="YFSSYS00011"/>
	</target>

	<target name="reverse-appid">
		<replace file="${pca.extn.folder}/plugins/${pca.plugin.id}/${pca.plugin.id}_extn.yuix" token="YFSSYS00011" value="YFSSYS00006"/>
	</target>

	<target name="build-pca">
		<!--antcall target="prepare-rcp-extn-folder" /-->
		<antcall target="jar-plugin-clients" />
		<!--Copy all the Jasper jars to the com.yantra.yfc.rcp.libs plugin-->

        
        <!-- Copy required Jasper jars to the kohls plugin -->
        <copy todir="${pca.extn.folder}/plugins/${pca.plugin.id}/lib">
           <fileset dir="${INSTALL_DIR}/jar/kohls/1_0">
                <exclude name="**/CVS/**"/>
	            <exclude name="kohlsjasper.jar" />
	        </fileset>
		</copy>
        
        <antcall target="copy-custom-plugins" />
		<exec executable="${INSTALL_DIR}/bin/sci_ant.sh" failonerror="true">
			<arg value="-Denv.RCP_EXTN_FOLDER=${pca.extn.folder}"/>
			<arg value="-f"/>
			<arg value="${INSTALL_DIR}/bin/buildsopapplication.xml"/>
			<arg value="buildSOPForWindows"/>
		</exec>

		<!--antcall target="replace-appid" />
		<antcall target="jar-plugin-clients" />
		<antcall target="copy-custom-plugins" /-->
<!--<exec executable="${INSTALL_DIR}/bin/sci_ant.sh" failonerror="true">
			<arg value="-f"/>
			<arg value="${INSTALL_DIR}/bin/buildcomapplication.xml"/>
			<arg value="buildCOMForWindows"/>
		</exec>-->
		<antcall target="reverse-appid" />
		<antcall target="updatesimpackage" />
	</target>


    <target name="updatesimpackage">
        <delete includeEmptyDirs="true">
            <fileset dir="${INSTALL_DIR}/rcpupdates/YFSSYS00006/9.1.0.6/win32.win32.x86" includes="**/*" defaultexcludes="no"/>
        </delete>
        
        <copy todir="${INSTALL_DIR}/rcpdrop/windows/sop" overwrite="${mode.overwrite}">
            <fileset dir="${pca.extn.folder}/Files" includes="**/*">
                <exclude name="**/locations.ycfg.*"/>
                <exclude name="**/sop.ini.*"/>
        	</fileset>
        </copy>
        
        <copy todir="${INSTALL_DIR}/rcpdrop/windows/sop" overwrite="${mode.overwrite}">
            <fileset dir="${pca.extn.folder}/Files" defaultexcludes="no"/>
        	<mapper type="glob" from="*.${env}" to=""/>	
        </copy>
        
        <copy todir="${INSTALL_DIR}/rcpdrop/windows/sop/WS">
            <fileset dir="${pca.extn.folder}/WS"/>
        </copy>
		<copy todir="${INSTALL_DIR}/rcpdrop/windows/sop/jre">
            <fileset dir="${pca.extn.folder}/jre"/>
        </copy>
        <copy todir="${INSTALL_DIR}/${pca.update.dir}/${sim.appid}/${sim.version}/${pca.update.windir}">
            <fileset dir="${INSTALL_DIR}/rcpdrop/windows/sop" includes="**/*" defaultexcludes="no"/>
        </copy>
        <delete file="${INSTALL_DIR}/rcpdrop/windows/sop1.0.zip"/>
		<zip destfile="${INSTALL_DIR}/rcpdrop/windows/sop1.0.zip" filesonly="false" whenempty="skip" update="false">
            <fileset dir="${INSTALL_DIR}/rcpdrop/windows/sop">
                <include name="**/**"/>
            </fileset>
        </zip>
    </target>
	<!-- = = = = = = = = = = = = = = = = =
          macrodef: macro-build-pca-classes
          Compiles the PCA client side code and jars the class files
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="macro-build-pca-classes">
        <attribute name="pluginid" />
    	<sequential>
    		<delete dir="${INSTALL_DIR}/dist/rcpdrop/plugins/@{pluginid}"/>
   			<mkdir dir="${INSTALL_DIR}/dist/rcpdrop/plugins/@{pluginid}"/>
    		<javac srcdir="${pca.extn.folder}/plugins/@{pluginid}" destdir="${pca.extn.folder}/plugins/@{pluginid}" executable="${JAVA_HOME}/bin/javac" debug="on" debuglevel="lines,vars,source" fork="true">
    			<classpath refid="pca.class.path" />
    		</javac>
    	</sequential>
	</macrodef>

    <!-- = = = = = = = = = = = = = = = = =
          macrodef: macro-jar-pca-client
          Builds the final Jar file containing the PCA client
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="macro-jar-pca-client">
        <attribute name="pluginid" />
    	<attribute name="version" />
    	<sequential>
    		<copy file="${pca.extn.folder}/plugins/@{pluginid}/META-INF/MANIFEST.MF" tofile="${pca.extn.folder}/plugins/@{pluginid}/META-INF/MANIFEST.MF.Release"/>
    		<replace file="${pca.extn.folder}/plugins/@{pluginid}/META-INF/MANIFEST.MF.Release" token="Bundle-Version: 1.0.0" value="Bundle-Version: @{version}"/>
    		<jar destfile="${INSTALL_DIR}/dist/rcpdrop/plugins/@{pluginid}_@{version}.jar"
    			manifest="${pca.extn.folder}/plugins/@{pluginid}/META-INF/MANIFEST.MF.Release">
    			<fileset dir="${pca.extn.folder}/plugins/@{pluginid}" >
    				<include name="resources/reports/*.jasper"/>
    				<include name="resources/*.ycfg"/>
					<include name="icons/**"/>
    		 		<include name="*.ythm"/>
    		 		<include name="*.ycfg"/>
    		 		<include name="*.yuix"/>
    		 		<include name="**/*.ycml"/>
    		 		<include name="*.properties"/>
    		 		<include name="*.xml"/>
    		 	</fileset>
    			<fileset dir="${INSTALL_DIR}/dist/rcpdrop/plugins/@{pluginid}" >
    		 		<include name="**"/>
    		 	</fileset>
    	 	</jar>	
    		<delete file="${pca.extn.folder}/plugins/@{pluginid}/META-INF/MANIFEST.MF.Release"/>
    		<delete dir="${INSTALL_DIR}/dist/rcpdrop/plugins/@{pluginid}"/>
   		</sequential>
	</macrodef>

	<target name="clean-client-build" description="Deletes directories" >
		<!-- Delete directories -->
       	<delete dir="${INSTALL_DIR}/dist/rcpdrop" />
		<mkdir dir="${INSTALL_DIR}/dist/rcpdrop/plugins" />
	</target>

	<target name="extract-rcp-clients">
		<copy todir="${INSTALL_DIR}/dist/reqdplugins">
			<fileset dir="${INSTALL_DIR}/rcp/SOP/9.1/platform/rcpclient/"/>
<!--			<fileset dir="${INSTALL_DIR}/rcpdrop/windows/8.5/com/plugins/com.yantra.pca.ycd.rcp_1.0.0"/>-->
		</copy>	
	</target>

	<!--This will compile the client jasper files-->
<!--
	<target name="compile-client-jasper">
		 <echo Message="Compiling client jasper Sources" />
		<taskdef name="jrc" classname="net.sf.jasperreports.ant.JRAntCompileTask">
	        <classpath refid="pca.class.path"/>
	    </taskdef>
		<jrc srcdir="${INSTALL_DIR}/PCAExtensions/plugins/${pca.plugin.id}/resources/reports" destdir="${INSTALL_DIR}/PCAExtensions/plugins/${pca.plugin.id}/resources/reports">
            <classpath refid="pca.class.path"/>
            <include name="*.jrxml"/>
		</jrc>
	</target>
-->
	<!--End: Added for building PCA components-->

	<!--This will compile the server jasper files-->
	<!--target name="compile-server-jasper">
		<echo Message="Compiling server jasper Sources" />
		<taskdef name="jrc" classname="net.sf.jasperreports.ant.JRAntCompileTask">
	        <classpath refid="pca.class.path"/>
	    </taskdef>
		<jrc srcdir="${INSTALL_DIR}/JasperReports" destdir="${INSTALL_DIR}/dist/JasperReports">
            <classpath refid="pca.class.path"/>
            <include name="*.jrxml"/>
		</jrc>
	</target-->

  	<target name="build-jars" description="Make Jar">
		<!-- Compile the java source files -->
        <delete dir="${INSTALL_DIR}/dist/Foundation/classes" />
        <mkdir dir="${INSTALL_DIR}/dist/Foundation/classes" />
		<javac classpathref="project.class.path" destdir="${INSTALL_DIR}/dist/Foundation/classes" executable="${JAVA_HOME}/bin/javac" debug="on" debuglevel="lines,vars,source">
			<src path="${INSTALL_DIR}/src">
			</src>
        </javac>
		<!-- Makes the project jar file -->
		<!--Create version file -->    		
        <tstamp>
            <format property="NOW" pattern="EEE, MMMM dd yyyy hh:mm aa z" />
        </tstamp>    	
		<echo file="${INSTALL_DIR}/dist/version.txt">
			Release Version: ${project.name} V ${release.version}
			Release Date: ${NOW}
		</echo>
		<!--Copy the version.txt-->
        <copy file="${INSTALL_DIR}/dist/version.txt" todir="${INSTALL_DIR}/dist/Foundation/classes"/>
        <jar destfile="${INSTALL_DIR}/dist/Foundation/${project.name}.jar" basedir="${INSTALL_DIR}/dist/Foundation/classes">
            <manifest>
                <attribute name="Built-By" value="${user.name}" />
                <section name="version-information">
                    <attribute name="Version" value="${release.version}" />
                    <attribute name="Date" value="${NOW}" />
                </section>
			</manifest>
        </jar>
  		<!--delete dir="${INSTALL_DIR}/dist/JasperReports" />
  		<mkdir dir="${INSTALL_DIR}/dist/JasperReports" />
  		<antcall target="compile-server-jasper"/>
  		<copy todir="${INSTALL_DIR}/dist/JasperReports" >
            <fileset dir="${INSTALL_DIR}/JasperReports">
                <exclude name="**/CVS" />
            	<exclude name="*.jrxml" />
            </fileset>
        </copy>

  		<copy file="${INSTALL_DIR}/dist/version.txt" todir="${INSTALL_DIR}/dist/JasperReports"/>
  		<jar destfile="${INSTALL_DIR}/dist/Foundation/${project.name}jasper.jar" basedir="${INSTALL_DIR}/dist/JasperReports">
            <manifest>
                <attribute name="Built-By" value="${user.name}" />
                <section name="version-information">
                    <attribute name="Version" value="${release.version}" />
                    <attribute name="Date" value="${NOW}" />
                </section>
			</manifest>
        </jar-->
   	</target>

	<target name="create-release-client" description="Build COM Client for KOHLS" depends="clean-client-build">
		<antcall target="build-pca"/>
   	</target>
</project>
