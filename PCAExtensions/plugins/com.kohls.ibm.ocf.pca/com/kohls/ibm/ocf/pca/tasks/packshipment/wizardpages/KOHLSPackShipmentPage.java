	
/*
 * Created on May 22,2012
 *
 */
package com.kohls.ibm.ocf.pca.tasks.packshipment.wizardpages;

import java.util.ArrayList;

import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.ScrolledComposite;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.Text;
import org.w3c.dom.Element;

import com.kohls.ibm.ocf.pca.rcp.KohlsApplicationInitializer;
import com.kohls.ibm.ocf.pca.tasks.packshipment.actions.KOHLSPackShipmentContainerCloseAction;
import com.kohls.ibm.ocf.pca.tasks.packshipment.actions.KOHLSPackShipmentContainerRemoveAction;
import com.kohls.ibm.ocf.pca.tasks.packshipment.actions.KOHLSPackShipmentContainerReprintLabelAction;
import com.kohls.ibm.ocf.pca.tasks.packshipment.actions.KOHLSPackShipmentRecordShortageAction;
import com.kohls.ibm.ocf.pca.tasks.packshipment.popups.KOHLSWeightRequiredPopup;
import com.kohls.ibm.ocf.pca.util.KOHLSPCAUtils;
import com.yantra.yfc.rcp.IYRCComposite;
import com.yantra.yfc.rcp.IYRCPanelHolder;
import com.yantra.yfc.rcp.YRCButtonBindingData;
import com.yantra.yfc.rcp.YRCComboBindingData;
import com.yantra.yfc.rcp.YRCConstants;
import com.yantra.yfc.rcp.YRCDialog;
import com.yantra.yfc.rcp.YRCLabelBindingData;
import com.yantra.yfc.rcp.YRCPlatformUI;
import com.yantra.yfc.rcp.YRCTableBindingData;
import com.yantra.yfc.rcp.YRCTblClmBindingData;
import com.yantra.yfc.rcp.YRCTextBindingData;
import com.yantra.yfc.rcp.YRCWizardBehavior;
import com.yantra.yfc.rcp.YRCXmlUtils;

/**
 * @author admin
 *
 * Generated by RCP Tools
 * Copyright © 2005, 2006 Sterling Commerce, Inc. All Rights Reserved.
 */

public class KOHLSPackShipmentPage extends Composite implements IYRCComposite {

	private Composite pnlRoot = null;
    private KOHLSPackShipmentBehavior myBehavior;
    public static final String FORM_ID = "com.kohls.ibm.ocf.pca.tasks.packshipment.wizardpages.KOHLSPackShipmentPage";

    private YRCWizardBehavior wizBehavior; // @jve:decl-index=0:
	private Composite mainComposite;
	private Composite headerComposite;
	private Composite navigationComposite;
	private Composite itemListComposite;
	public Table tblItemList;
	private Composite scanShipmentComposite = null;
	protected boolean hasLocalShipment = false;
	private Composite mainContainerComposite = null;
	private Composite compositefiller = null;
	private GridData gridData4;
	private GridData gridData11;  //  @jve:decl-index=0:
	private GridData gridData2;
	public static final int CLM_UOM_WIDTH = 70;
	public static final int CLM_LINE_QTY_WIDTH = 150;
	private TableColumn tblClmItemID;
	private Text txtScanShipmentNo = null;
	private Label lblOrderNo = null;
	private Label lblScanShipmentNo = null;
	private Label lblScannedOrderNo = null;
	private Label lblShipmentNo = null;
	private Label lblScannedShipmentNo = null;
	
	private Composite containerComposite = null;
	private Composite packContainerComposite = null;
	private Composite containerDetailsComposite = null;
	private Composite headerPackcomposite = null;
	private Composite ContainerEntryDtlscomposite = null;
	
	ScrolledComposite scrolledCompositeMainComposite = null;
	
	private Label lblPackContainer = null;
	private Label lblContainerType = null;
	private Combo cmbContainerType = null;
	private Label lblContainerNo = null;
	private Text txtContainerNo = null;
	private Label lblPackStationNo = null;
	public Text txtPackStationNo = null;
	private Label lblItemID = null;
	private Text txtItemID = null;
	private Composite HeaderItemListComposite = null;
	private Label lblItemList = null;
	private Composite headerCtnDtlscomposite = null;
	private Label lblCtnDetailsHeader = null;
	private Composite CtnNoTotalWtcomposite = null;
	private Label lblCtnDetailsNo;
	private Label lblTotalWeight;
	private Text txtWeightNo;
	private Combo cmbCtnDetailsNo;
	private Composite containerItemListComposite;
	private Table tblContainerDetails;
	private Composite containerDetailButtonsComposite;
	private Button btnRemoveContainer;
	private Button btnReprintLabel;
	private Button btnCloseContainer;
	private Label lblSeparator = null;
	private Label lblQtyNo = null;
	private Text txtQtyOne = null;
	private Button btnRecordShortage = null;
	private Composite cmpPrinterCombos = null;
	private Label lblPackPrinter = null;
	private Combo cmbPackPrinter = null;
	private Label lblLabelPrinter = null;
	private Combo cmbLabelPrinter = null;
	public KOHLSPackShipmentPage(Composite parent, int style, Object wizardInput) {
		super(parent, style);
		initialize();
        setBindingForComponents();
        myBehavior = new KOHLSPackShipmentBehavior(this, FORM_ID,wizardInput);
	}
	
	private void initialize() {
		createRootPanel();
		this.setLayout(new FillLayout());
		setSize(new org.eclipse.swt.graphics.Point(860,520));
	}
	

	private void setBindingForComponents() {
        //TODO: set all bindings here
    	setBindingForShipmentPanelComponents();
    	setBindingForItemListPanelComponents();
    	setBindingForPackContainerPanelComponents();
    	setBindingForContainerDetailsPanelComponents();
    	setBindingsForPrinterDetailsComponents();
    	
    }
    
    private void setBindingsForPrinterDetailsComponents() {
		// TODO Auto-generated method stub
    	
	 	YRCComboBindingData bdCmbMPrinterPack = new YRCComboBindingData();
	 	bdCmbMPrinterPack.setName("cmbLabelPrinter");
	 	bdCmbMPrinterPack.setSourceBinding("getDeviceListLablePrinter:Devices/Device/@DeviceId");
	 	bdCmbMPrinterPack.setCodeBinding("DeviceId");
	 	bdCmbMPrinterPack.setTargetBinding("PrintMultiPackShipment:PrintPackShipment/@PrinterID");
	 	bdCmbMPrinterPack.setListBinding("getDeviceListLablePrinter:Devices/Device");
	 	bdCmbMPrinterPack.setDescriptionBinding("@DeviceId");
	 	cmbLabelPrinter.setData(YRCConstants.YRC_COMBO_BINDING_DEFINATION, bdCmbMPrinterPack);
	 	cmbLabelPrinter.setData(YRCConstants.YRC_CONTROL_NAME,"cmbLabelPrinter");
	 	cmbLabelPrinter.addSelectionListener(new SelectionAdapter() {
		      public void widgetSelected(SelectionEvent e) {
		    	 
		    	  myBehavior.handleComboBoxSelectionForLabelPrinter(cmbLabelPrinter);
		      }
		      });
		
	 	YRCComboBindingData bdCmbMPrinterLabel = new YRCComboBindingData();
	 	bdCmbMPrinterLabel.setName("cmbPackPrinter");
	 	bdCmbMPrinterLabel.setSourceBinding("getDeviceListPackPrinter:Devices/Device/@DeviceId");
	 	bdCmbMPrinterLabel.setCodeBinding("DeviceId");
	 	bdCmbMPrinterLabel.setTargetBinding("PrintMultiPackShipment:PrintPackShipment/@PrinterID");
	 	bdCmbMPrinterLabel.setListBinding("getDeviceListPackPrinter:Devices/Device");
	 	bdCmbMPrinterLabel.setDescriptionBinding("@DeviceId");
	 	cmbPackPrinter.setData(YRCConstants.YRC_COMBO_BINDING_DEFINATION, bdCmbMPrinterLabel);
	 	cmbPackPrinter.setData(YRCConstants.YRC_CONTROL_NAME,"cmbPackPrinter");
	 	cmbPackPrinter.addSelectionListener(new SelectionAdapter() {
		      public void widgetSelected(SelectionEvent e) {
		    	 
		    	  myBehavior.handleComboBoxSelectionForPackPrinter(cmbPackPrinter);
		      }
		      });
	}

	private void setBindingForContainerDetailsPanelComponents() {

        //Binding for Container# combo box
    	
    	YRCComboBindingData bdCmbContainerNo = new YRCComboBindingData();
    	bdCmbContainerNo.setName("cmbCtnDetailsNo");
    	bdCmbContainerNo.setSourceBinding("Containers:Containers/Container/@ContainerNo");
    	bdCmbContainerNo.setCodeBinding("ContainerNo");
    	bdCmbContainerNo.setTargetBinding("CurrentContainer:Container/@ContainerNo");
    	bdCmbContainerNo.setListBinding("Containers:Containers/Container");
    	bdCmbContainerNo.setDescriptionBinding("@ContainerNo");
		cmbCtnDetailsNo.setData(YRCConstants.YRC_COMBO_BINDING_DEFINATION, bdCmbContainerNo);
		bdCmbContainerNo.setMandatory(true);
		cmbCtnDetailsNo.addSelectionListener(new SelectionAdapter() {
		      public void widgetSelected(SelectionEvent e) {
		    	  myBehavior.updateContainerDetailsTable(cmbCtnDetailsNo.getText().trim());
		      }
		      });

		  //Binding for lblWeightNo 
		
		YRCTextBindingData txtWeightNoBindingData = new YRCTextBindingData();
		txtWeightNoBindingData.setName("txtWeightNo");
		txtWeightNoBindingData.setSourceBinding("CurrentContainerSource:Container/@ContainerNetWeight;Container/@ContainerNetWeightUOM");
		txtWeightNoBindingData.setKey("cntr_key_binding");
		txtWeightNo.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION,
				txtWeightNoBindingData);
		txtWeightNo.setData(YRCConstants.YRC_CONTROL_CUSTOMTYPE,
				"DisplayText");
		txtWeightNo.setEditable(false);
		 //Binding for Container Details Table
		
		YRCTableBindingData ctnrDetailsTblBD = new YRCTableBindingData();
        YRCTblClmBindingData colBindings[] = new YRCTblClmBindingData[tblContainerDetails.getColumnCount()];
 		
 		
        colBindings[0] = new YRCTblClmBindingData();
        colBindings[0].setAttributeBinding("@ItemID");
        colBindings[0].setColumnBinding(YRCPlatformUI.getString("ITEM_ID"));
        colBindings[0].setSortReqd(true);
        
        colBindings[1] = new YRCTblClmBindingData();
        colBindings[1].setAttributeBinding("ShipmentLine/@ItemDesc");
        colBindings[1].setColumnBinding(YRCPlatformUI.getString("ITEM_DESC"));
        colBindings[1].setSortReqd(true);
        
        colBindings[2] = new YRCTblClmBindingData();
        colBindings[2].setAttributeBinding("@UnitOfMeasure");
        colBindings[2].setColumnBinding(YRCPlatformUI.getString("UOM"));
        colBindings[2].setSortReqd(true);
        
        colBindings[3] = new YRCTblClmBindingData();
        colBindings[3].setAttributeBinding("@Quantity");
        colBindings[3].setColumnBinding(YRCPlatformUI.getString("Quantity"));
        colBindings[3].setSortReqd(true);
       
        ctnrDetailsTblBD.setSortRequired(true);
        ctnrDetailsTblBD.setSourceBinding("CurrentContainerSource:/Container/ContainerDetails/ContainerDetail");
        ctnrDetailsTblBD.setName("tblContainerDetails");
        ctnrDetailsTblBD.setTblClmBindings(colBindings);
        ctnrDetailsTblBD.setKeyNavigationRequired(true);

       	tblContainerDetails.setData(YRCConstants.YRC_TABLE_BINDING_DEFINATION, ctnrDetailsTblBD);
		
		//Binding For Buttons
       	
       	YRCButtonBindingData btnCloseContainerBindingData = new YRCButtonBindingData();
        btnCloseContainerBindingData.setActionId(KOHLSPackShipmentContainerCloseAction.ACTION_ID);
        btnCloseContainerBindingData.setActionHandlerEnabled(true);
        btnCloseContainerBindingData.setName("btnCloseContainer");        
        btnCloseContainer.setData(YRCConstants.YRC_BUTTON_BINDING_DEFINATION, btnCloseContainerBindingData);
        btnCloseContainer.setText(YRCPlatformUI.getString("CloseContainer"));
       
        
        YRCButtonBindingData btnRemoveContainerBindingData = new YRCButtonBindingData();
        btnRemoveContainerBindingData.setActionId(KOHLSPackShipmentContainerRemoveAction.ACTION_ID);
        btnRemoveContainerBindingData.setActionHandlerEnabled(true);
        btnRemoveContainerBindingData.setName("btnRemoveContainer");        
        btnRemoveContainer.setData(YRCConstants.YRC_BUTTON_BINDING_DEFINATION, btnRemoveContainerBindingData);
        btnRemoveContainer.setText(YRCPlatformUI.getString("RemoveContainer"));
       
//      Drop2 - Reprint Label Functionality - Start
        YRCButtonBindingData btnReprintLabelBindingData = new YRCButtonBindingData();
        btnReprintLabelBindingData.setActionId(KOHLSPackShipmentContainerReprintLabelAction.ACTION_ID);
        btnReprintLabelBindingData.setActionHandlerEnabled(true);
        btnReprintLabelBindingData.setName("btnReprintLabel");        
        btnReprintLabel.setData(YRCConstants.YRC_BUTTON_BINDING_DEFINATION, btnReprintLabelBindingData);
        btnReprintLabel.setText(YRCPlatformUI.getString("ReprintLabel"));    
//		Drop2 - Reprint Label Functionality - End		
	}

	private void setBindingForPackContainerPanelComponents() {
		
		//Binding for ContainerType combo box
		
	  	YRCComboBindingData bdCmbContainerType = new YRCComboBindingData();
		bdCmbContainerType.setName("cmbContainerType");
		bdCmbContainerType.setSourceBinding("getItemListForContainerType_Output:ItemList/Item/@ItemID");
		bdCmbContainerType.setCodeBinding("ItemID");
		bdCmbContainerType.setTargetBinding("CurrentContainer:Container/@ContainerType");
		bdCmbContainerType.setListBinding("getItemListForContainerType_Output:ItemList/Item");
		bdCmbContainerType.setDescriptionBinding("PrimaryInformation/@ShortDescription");
		cmbContainerType.setData(YRCConstants.YRC_COMBO_BINDING_DEFINATION, bdCmbContainerType);
		bdCmbContainerType.setMandatory(true);
		
		//myBehavior.setContainerUnitWt();
		
		cmbContainerType.addSelectionListener(new SelectionAdapter() {
		      public void widgetSelected(SelectionEvent e) {
		    	  myBehavior.setContainerUnitWt();
		      }
		      });
		
		
		//Binding for Container #
		YRCTextBindingData txtContainerNoBindingData = new YRCTextBindingData();
		txtContainerNoBindingData.setSourceBinding("CurrentContainerSource:Container/@ContainerNo");
		txtContainerNoBindingData.setTargetBinding("CurrentContainer:Container/@ContainerNo");
		txtContainerNoBindingData.setName("txtContainerNo");
		txtContainerNoBindingData.setMandatory(false);
		txtContainerNo.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION,
				txtContainerNoBindingData);
		txtContainerNo.setData(YRCConstants.YRC_CONTROL_NAME, "txtContainerNo");
		txtContainerNo.setEditable(false);
		txtContainerNo.setData(YRCConstants.YRC_CONTROL_CUSTOMTYPE,
				"Grey");
		
		// Binding for PackStationNo
		YRCTextBindingData txtPackStationNoBindingData = new YRCTextBindingData();
		//txtPackStationNoBindingData.setSourceBinding("CurrentContainerSource:Container/@CommitmentCode");
		
		txtPackStationNoBindingData.setTargetBinding("CurrentContainer:Container/@CommitmentCode");
		txtPackStationNoBindingData.setName("txtPackStationNo");
		txtPackStationNoBindingData.setMandatory(false);
		txtPackStationNo.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION,
				txtPackStationNoBindingData);
		txtPackStationNo.setData(YRCConstants.YRC_CONTROL_NAME, "txtPackStationNo");
		txtPackStationNo.setEditable(false);
		txtPackStationNo.setData(YRCConstants.YRC_CONTROL_CUSTOMTYPE,
				"Grey");
		//Binding for Qty
		
		YRCTextBindingData txtQtyNoBindingData = new YRCTextBindingData();
		txtQtyNoBindingData.setName("txtQtyNo");
		txtQtyNoBindingData.setMandatory(false);
		txtQtyOne.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION,
				txtQtyNoBindingData);
		txtQtyOne.setData(YRCConstants.YRC_CONTROL_NAME, "txtQtyNo");
		txtQtyOne.setData(YRCConstants.YRC_CONTROL_CUSTOMTYPE, "DisplayText");
		
		
		//Binding for Scan SKU UPC
		
		YRCTextBindingData txtItemIDBindingData = new YRCTextBindingData();
		txtItemIDBindingData.setTargetBinding("NewContainer:Container/ContainerDetails/ContainerDetail/@ItemAlias");
		txtItemIDBindingData.setName("txtItemID");
		txtItemIDBindingData.setMandatory(false);
		txtItemID.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION,
				txtItemIDBindingData);
		txtItemID.setData(YRCConstants.YRC_CONTROL_NAME, "txtItemID");
		txtItemID.addListener(SWT.FocusOut, new Listener() {
		      public void handleEvent(Event e) {
		    	  
		    	  if(cmbContainerType.getText().equals("")){
		    		  YRCPlatformUI.showError(YRCPlatformUI.getString("ERROR"),YRCPlatformUI.getString("INFO_SELECT_CONTAINER_TYPE"));
		    		  cmbContainerType.setFocus();
		    	  }else
		    	  {
		          myBehavior.translateBarCode(txtItemID.getText().trim());
		    	  }
		         }
		       });
		
		
	}

	private void setBindingForItemListPanelComponents() {
		
		//
		
		if(KOHLSPCAUtils.hasPermissionForRecordShortage()){
		    YRCButtonBindingData btnRecordShortageBindingData = new YRCButtonBindingData();
	        btnRecordShortageBindingData.setActionId(KOHLSPackShipmentRecordShortageAction.ACTION_ID);
	        btnRecordShortageBindingData.setActionHandlerEnabled(true);
	        btnRecordShortageBindingData.setName("btnRecordShortage");        
	        btnRecordShortage.setData(YRCConstants.YRC_BUTTON_BINDING_DEFINATION, btnRecordShortageBindingData);
	        btnRecordShortage.setText(YRCPlatformUI.getString("Record_Shortage"));
		}
		else {
			btnRecordShortage.setVisible(false);
		}
		
		//
		
 		YRCTableBindingData bindingData = new YRCTableBindingData();
        YRCTblClmBindingData colBindings[] = new YRCTblClmBindingData[tblItemList.getColumnCount()];
 		
 		
        colBindings[0] = new YRCTblClmBindingData();
        colBindings[0].setAttributeBinding("@ItemID");
        colBindings[0].setColumnBinding(YRCPlatformUI.getString("ItemID"));
        colBindings[0].setSortReqd(true);
        
        colBindings[1] = new YRCTblClmBindingData();
        colBindings[1].setAttributeBinding("@ItemDesc");
        colBindings[1].setColumnBinding(YRCPlatformUI.getString("ItemDesc"));
        colBindings[1].setSortReqd(true);
        
        colBindings[2] = new YRCTblClmBindingData();
        colBindings[2].setAttributeBinding("@UnitOfMeasure");
        colBindings[2].setColumnBinding(YRCPlatformUI.getString("UnitOfMeasure"));
        colBindings[2].setSortReqd(true);
        
        colBindings[3] = new YRCTblClmBindingData();
        colBindings[3].setAttributeBinding("@Quantity");
        colBindings[3].setColumnBinding(YRCPlatformUI.getString("Quantity"));
        colBindings[3].setSortReqd(true);
        
        colBindings[4] = new YRCTblClmBindingData();
        colBindings[4].setAttributeBinding("@PlacedQuantity");
        colBindings[4].setColumnBinding(YRCPlatformUI.getString("Qty Packed"));
        colBindings[4].setSortReqd(true);
        
        colBindings[5] = new YRCTblClmBindingData();
        colBindings[5].setAttributeBinding("@QuantityToPack");
        colBindings[5].setColumnBinding(YRCPlatformUI.getString("Qty_to_be_Packed"));
        colBindings[5].setSortReqd(true);
      
        bindingData.setSortRequired(true);
        bindingData.setSourceBinding("getShipmentLineList_Output:/ShipmentLines/ShipmentLine");
        bindingData.setName("ShipmentLines");
        bindingData.setTblClmBindings(colBindings);
        bindingData.setKeyNavigationRequired(true);

       	tblItemList.setData(YRCConstants.YRC_TABLE_BINDING_DEFINATION, bindingData);
		
	}

	private void setBindingForShipmentPanelComponents() {
		
		YRCTextBindingData txtScanShipmentNoBindingData = new YRCTextBindingData();
		
		txtScanShipmentNoBindingData.setTargetBinding("getShipmentLineList_Input:Shipment/@ShipmentNo");
		txtScanShipmentNoBindingData.setName("txtScanShipmentNo");
		txtScanShipmentNo.setData(YRCConstants.YRC_TEXT_BINDING_DEFINATION,
				txtScanShipmentNoBindingData);
		txtScanShipmentNo.setData(YRCConstants.YRC_CONTROL_NAME,"txtScanShipmentNo");
		//<!-- Start - Drop2 changes -->
		txtScanShipmentNo.addFocusListener(new org.eclipse.swt.events.FocusAdapter() {
			public void focusLost(org.eclipse.swt.events.FocusEvent e) {
				 String strShipmentNo =	getWizardPageBehavior().getFieldValue("txtScanShipmentNo");
				 if(!"".equals(strShipmentNo)){
				 Element eleShipment = myBehavior.returnModel("getShipmentDetailsForPackShipment");
				 Element eleContainers = YRCXmlUtils.getChildElement(eleShipment, "Containers");
		    	  ArrayList<Element> arrContainer = YRCXmlUtils.getChildren(eleContainers, "Container");
		    	  int iContainerLength = arrContainer.size();
		    	 // <!-- Start - Drop2 changes  ->
		    	  if(iContainerLength > 0){
		    		  for(int i=0; i<iContainerLength; i++){
		    			  Element eleContainer = (Element)arrContainer.get(i);
		    			  String strIsPackProcessComplete = eleContainer.getAttribute("IsPackProcessComplete");
		    			  if(!"Y".equals(strIsPackProcessComplete)){
		    					YRCPlatformUI
		    					.showInformation(
		    							YRCPlatformUI.getString("WARNING"),
		    							YRCPlatformUI
		    									.getString("INFO_UNOPENED_ITEMS"));
		    			  }		    			  
		    		  }
		    	  }
			}
			//<!-- End - Drop2 changes -->
		    	  if(!YRCPlatformUI.equals(txtScanShipmentNo.getText().trim(), ""))
			          myBehavior.searchShipmentLineList();
			}
		});
		
		YRCLabelBindingData lblScannedOrderNoBindingData = new YRCLabelBindingData();
		lblScannedOrderNoBindingData.setSourceBinding("getShipmentLineList_Output:ShipmentLines/ShipmentLine/@OrderNo");
		lblScannedOrderNoBindingData.setName("lblScannedOrderNo");
		lblScannedOrderNo.setData(YRCConstants.YRC_LABEL_BINDING_DEFINITION,lblScannedOrderNoBindingData);
		lblScannedOrderNo.setData(YRCConstants.YRC_CONTROL_NAME,"lblScannedOrderNo");
		lblScannedOrderNo.setData(YRCConstants.YRC_CONTROL_CUSTOMTYPE,"Text");
		
		YRCLabelBindingData lblScannedShipmentNoBindingData = new YRCLabelBindingData();
		lblScannedShipmentNoBindingData.setSourceBinding("getShipmentDetailsForPackShipment:Shipment/@ShipmentNo");
		lblScannedShipmentNoBindingData.setName("lblScannedShipmentNo");
		lblScannedShipmentNo.setData(YRCConstants.YRC_LABEL_BINDING_DEFINITION,
				lblScannedShipmentNoBindingData);
		lblScannedShipmentNo.setData(YRCConstants.YRC_CONTROL_NAME,"lblScannedShipmentNo");
		lblScannedShipmentNo.setData(YRCConstants.YRC_CONTROL_CUSTOMTYPE,"Text");
		
	}

	public String getTitle() {
		return YRCPlatformUI.getString("Pack_Shipment");
	}
	
	/**
	 * This method also sets the header message on KOHLSPackShipmentEditor
	 *
	 */
	public boolean setFocus() {
		super.setFocus();
		return true;
	}
    
    public String getFormId() {
        return FORM_ID;
    }
    
    public Composite getRootPanel() {
        return pnlRoot;
    }

    
    public YRCWizardBehavior getWizardBehavior() {
		return this.wizBehavior;
	}

	public void setWizBehavior(YRCWizardBehavior wizBehavior) {
		this.wizBehavior = wizBehavior;
	}

	public KOHLSPackShipmentBehavior getWizardPageBehavior() {
		return myBehavior;
	}

	private void createRootPanel() {
		GridLayout gridLayout2 = new GridLayout();
		gridLayout2.verticalSpacing = 2;
		gridLayout2.marginHeight = 0;
		gridLayout2.numColumns = 1;
		gridLayout2.marginWidth = 0;
		pnlRoot = new Composite(this, SWT.NONE);
		pnlRoot.setData(YRCConstants.YRC_CONTROL_CUSTOMTYPE, "TaskComposite");
		pnlRoot.setData(YRCConstants.YRC_CONTROL_NAME, "pnlRoot");
		pnlRoot.setLayout(gridLayout2);
		createComposite();
		
		createCompositeOrderHoldNotes();

		createComposite22();
	}

	/**
	 * This method initializes composite4
	 * 
	 */
	private void createCompositeOrderNotes() {
		gridData4 = new GridData();
		gridData4.horizontalAlignment = GridData.FILL;
		gridData4.grabExcessHorizontalSpace = true;
		gridData4.verticalAlignment = GridData.FILL;

	}


	/**
	 * This method initializes composite2
	 * 
	 */
	private void createComposite22() {
		GridData gridData7 = new org.eclipse.swt.layout.GridData();
		gridData7.horizontalAlignment = GridData.FILL;
		gridData7.grabExcessHorizontalSpace = true;
		gridData7.verticalAlignment = GridData.FILL;
		GridLayout gridLayout4 = new GridLayout();
		gridLayout4.horizontalSpacing = 5;
		gridLayout4.marginHeight = 5;
		gridLayout4.marginWidth = 5;
		gridLayout4.numColumns = 1;
		gridLayout4.verticalSpacing = 5;
		gridLayout4.makeColumnsEqualWidth = false;
		navigationComposite = new Composite(getRootPanel(), SWT.NONE);
		navigationComposite.setLayout(gridLayout4);
		createCompositefiller();
		navigationComposite.setLayoutData(gridData7);
		navigationComposite.setData(YRCConstants.YRC_CONTROL_CUSTOMTYPE, "TaskComposite");
		navigationComposite.setData(YRCConstants.YRC_CONTROL_NAME, "navigationComposite");
		
	}

	/**
	 * This method initializes composite
	 * 
	 */
	private void createComposite() {
		GridLayout gridLayout = new GridLayout();
		gridLayout.numColumns = 1;
		gridLayout.marginWidth = 1;
		gridLayout.verticalSpacing = 3;
		gridLayout.marginHeight = 1;
		gridLayout.horizontalSpacing = 8;
		gridLayout.makeColumnsEqualWidth = false;
		GridData gridData11 = new org.eclipse.swt.layout.GridData();
		gridData11.horizontalAlignment = GridData.FILL;
		gridData11.grabExcessHorizontalSpace = true;
		gridData11.verticalSpan = 1;
		gridData11.heightHint = 250;
		gridData11.grabExcessVerticalSpace = false;
		gridData11.verticalAlignment = GridData.FILL;
		mainComposite = new Composite(getRootPanel(), SWT.NONE);
		mainComposite.setLayoutData(gridData11);
		mainComposite.setLayout(gridLayout);
		mainComposite.setData(YRCConstants.YRC_CONTROL_NAME, "mainComposite");
		createComposite5();
		createHeaderItemListComposite();
		createComposite3();
	}

	private void createComposite5() {
		GridData gridData3 = new org.eclipse.swt.layout.GridData();
		gridData3.horizontalAlignment = GridData.FILL;
		gridData3.grabExcessHorizontalSpace = true;
		gridData3.grabExcessVerticalSpace = true;
		gridData3.verticalAlignment = GridData.CENTER;
		GridLayout gridLayout1 = new GridLayout();
		gridLayout1.numColumns = 1;
		gridLayout1.marginWidth = 5;
		gridLayout1.marginHeight = 3;
		gridLayout1.horizontalSpacing = 5;
		gridLayout1.makeColumnsEqualWidth = false;
		headerComposite = new Composite(mainComposite, SWT.NONE);
		headerComposite.setLayout(gridLayout1);
		createComposite6();
		headerComposite.setLayoutData(gridData3);
		headerComposite.setData(YRCConstants.YRC_CONTROL_NAME,
				"headerComposite");
		headerComposite.setData(YRCConstants.YRC_CONTROL_CUSTOMTYPE, "Composite");
		
		// createComposite2();
	}

	/**
	 * This method initializes group
	 * 
	 */
	private void createComposite3() {
		GridLayout gridLayout = new GridLayout();
		gridLayout.numColumns = 1;
		gridLayout.marginWidth = 0;
		gridLayout.verticalSpacing = 3;
		gridLayout.marginHeight = 3;
		gridLayout.horizontalSpacing = 8;
		gridLayout.makeColumnsEqualWidth = false;
		gridData11 = new org.eclipse.swt.layout.GridData();
		gridData11.horizontalAlignment = GridData.FILL;
		gridData11.grabExcessHorizontalSpace = true;
		gridData11.verticalSpan = 1;
		gridData11.grabExcessVerticalSpace = true;
		gridData11.verticalAlignment = GridData.FILL;
		itemListComposite = new Composite(mainComposite, SWT.NONE);
		itemListComposite.setSize(SWT.DEFAULT, SWT.DEFAULT);
		itemListComposite.setLayoutData(gridData11);
		itemListComposite.setLayout(gridLayout);
		itemListComposite.setData(YRCConstants.YRC_CONTROL_NAME,
				"itemListComposite");
		itemListComposite.setData(YRCConstants.YRC_CONTROL_CUSTOMTYPE, "Composite");
		createTable();

	}

	/**
	 * This method initializes table
	 * 
	 */
	private void createTable() {
		
		GridData gridData6 = new GridData();
		gridData6.horizontalAlignment = GridData.FILL;
		gridData6.grabExcessHorizontalSpace = true;
		gridData6.grabExcessVerticalSpace = true;
		gridData6.horizontalSpan = 2;
		// gridData6.heightHint = 200;
		gridData6.heightHint = 150;
		gridData6.verticalAlignment = GridData.FILL;
		tblItemList = new Table(itemListComposite, SWT.FULL_SELECTION | SWT.NONE);
		tblItemList.setHeaderVisible(true);
		tblItemList.setLinesVisible(true);
		tblItemList.setLayoutData(gridData6);
		tblItemList.setData(YRCConstants.YRC_CONTROL_CUSTOMTYPE, "Table");
		
		
		tblClmItemID = new TableColumn(tblItemList, SWT.NONE);
		tblClmItemID.setWidth(80);
		tblClmItemID.setText("ItemID");
		
		
		//tblClmCheckBox.setAlignment(131072);

		TableColumn tblClmItemDescription = new TableColumn(tblItemList, SWT.NONE);
		tblClmItemDescription.setWidth(150);
		tblClmItemDescription.setText("Item Desc");
		
		TableColumn tblClmUOM = new TableColumn(tblItemList, SWT.NONE);
		tblClmUOM.setWidth(CLM_UOM_WIDTH);
		tblClmUOM.setText("UOM");
		
		TableColumn tblClmLineQty = new TableColumn(tblItemList, SWT.NONE);
		tblClmLineQty.setWidth(CLM_LINE_QTY_WIDTH);
		tblClmLineQty.setText("Line Qty");

		TableColumn tblClmQtytobePacked = new TableColumn(tblItemList, SWT.NONE);
		tblClmQtytobePacked.setWidth(150);
		tblClmQtytobePacked.setText("Qty to be Packed");

		TableColumn tblClmQtyPacked = new TableColumn(tblItemList, SWT.NONE);
		tblClmQtyPacked.setWidth(150);
		tblClmQtyPacked.setText("Qty Packed");
	}



	public String getHelpId() {
		return null;
	}
	
	
	/**
	 * This method initializes composite6
	 * 
	 */
	private void createComposite6() {
		GridData gridData31 = new GridData();
		gridData31.horizontalAlignment = GridData.FILL;
		gridData31.grabExcessHorizontalSpace = true;
		gridData31.horizontalSpan = 2;
		gridData31.grabExcessVerticalSpace = true;
		gridData31.verticalAlignment = GridData.CENTER;
		GridData gridData21 = new GridData();
		gridData21.horizontalAlignment = GridData.END;
		gridData21.verticalAlignment = GridData.CENTER;
		GridData gridData15 = new GridData();
		gridData15.horizontalAlignment = GridData.FILL;
		gridData15.horizontalSpan = 2;
		gridData15.grabExcessHorizontalSpace = false;
		gridData15.grabExcessVerticalSpace = true;
		gridData15.verticalAlignment = GridData.CENTER;
		GridData gridData14 = new GridData();
		gridData14.horizontalAlignment = GridData.END;
		gridData14.grabExcessHorizontalSpace = true;
		gridData14.verticalAlignment = GridData.CENTER;
		GridData gridData10 = new GridData();
		gridData10.horizontalAlignment = GridData.FILL;
		gridData10.verticalAlignment = GridData.CENTER;
		GridData gridData = new GridData();
		gridData.horizontalAlignment = GridData.FILL;
		gridData.horizontalSpan = 2;
		gridData.verticalAlignment = GridData.CENTER;
		GridData gridData9 = new GridData();
		gridData9.horizontalAlignment = GridData.BEGINNING;
		gridData9.grabExcessHorizontalSpace = true;
		gridData9.verticalAlignment = GridData.CENTER;
		gridData9.exclude=true;
		GridLayout gridLayout3 = new GridLayout();
		gridLayout3.numColumns = 12;
		gridLayout3.makeColumnsEqualWidth = true;
		GridData gridData12 = new org.eclipse.swt.layout.GridData();
		gridData12.horizontalAlignment = org.eclipse.swt.layout.GridData.FILL;
		gridData12.grabExcessHorizontalSpace = true;
		gridData12.verticalAlignment = org.eclipse.swt.layout.GridData.CENTER;
		GridData gridData2 = new org.eclipse.swt.layout.GridData();
		gridData2.horizontalAlignment = GridData.BEGINNING;
		gridData2.grabExcessHorizontalSpace = true;
		gridData2.grabExcessVerticalSpace = true;
		gridData2.widthHint = -1;
		gridData2.verticalAlignment = GridData.FILL;
		scanShipmentComposite = new Composite(headerComposite, SWT.NONE);
		scanShipmentComposite.setLayoutData(gridData2);
		scanShipmentComposite.setLayout(gridLayout3);
		scanShipmentComposite.setVisible(true);
		scanShipmentComposite.setData(YRCConstants.YRC_CONTROL_NAME,
				"checkBoxComposite");

	
		lblScanShipmentNo = new Label(getScanShipmentComposite(), SWT.NONE);
		lblScanShipmentNo.setText("Scan Shipment #");
		lblScanShipmentNo.setLayoutData(gridData10);
		txtScanShipmentNo = new Text(getScanShipmentComposite(), SWT.BORDER);
		txtScanShipmentNo.setLayoutData(gridData);
		lblOrderNo = new Label(getScanShipmentComposite(), SWT.NONE);
		lblOrderNo.setText("Order#");
		lblOrderNo.setLayoutData(gridData14);
		lblScannedOrderNo = new Label(getScanShipmentComposite(), SWT.NONE);
		lblScannedOrderNo.setLayoutData(gridData15);
		lblShipmentNo = new Label(getScanShipmentComposite(), SWT.NONE);
		lblShipmentNo.setText("Shipment#");
		lblShipmentNo.setLayoutData(gridData21);
		lblScannedShipmentNo = new Label(getScanShipmentComposite(), SWT.NONE);
		lblScannedShipmentNo.setLayoutData(gridData31);
		
	}

	/*public Element getNotesModel() {
	return pnlOrderHoldNotes.getTargetModelForNotes();
	}*/

	public Composite getItemListComposite() {
		return itemListComposite;
	}

	/*public YCDNoteComposite getpnlOrderHoldNotes() {
		return pnlOrderHoldNotes;
	}*/

	public Composite getNavigationComposite() {
		return navigationComposite;
	}

	
	/**
	 * This method initializes compositeOrderHoldNotes
	 * 
	 */
	private void createCompositeOrderHoldNotes() {
		 gridData2 = new org.eclipse.swt.layout.GridData();
		gridData2.horizontalAlignment = GridData.FILL;
		gridData2.verticalAlignment = GridData.FILL;
		gridData2.grabExcessHorizontalSpace = true;
		gridData2.grabExcessVerticalSpace = true;
		gridData2.heightHint = -1;
		mainContainerComposite = new Composite(getRootPanel(), SWT.NONE);
		mainContainerComposite.setLayoutData(gridData2);
		createContainerComposite();
		mainContainerComposite.setLayout(new FillLayout());
		createCompositeOrderNotes();
	}

	public Composite getMainContainerComposite() {
		return mainContainerComposite;
	}

	/**
	 * This method initializes compositefiller
	 * 
	 */
	private void createCompositefiller() {
		GridLayout gridLayout6 = new GridLayout();
		gridLayout6.numColumns = 2;
		GridData gridData8 = new GridData();
		gridData8.horizontalAlignment = GridData.FILL;
		gridData8.grabExcessHorizontalSpace = true;
		gridData8.verticalAlignment = GridData.CENTER;
		compositefiller = new Composite(getNavigationComposite(), SWT.NONE);
		compositefiller.setLayout(gridLayout6);
		compositefiller.setLayoutData(gridData8);
		compositefiller.setVisible(false);
	}

	/*public Button getBtnConfirm() {
		return btnConfirm;
	}*/

	public Composite getHeaderComposite() {
		return headerComposite;
	}

	public Composite getPnlRoot() {
		return pnlRoot;
	}
	
	
	public Composite getScanShipmentComposite() {
		return scanShipmentComposite;
	}

	public void changeLayoutOfHoldComposite() {
		itemListComposite.setLayoutData(gridData11);
		gridData2.heightHint = 1;
		mainContainerComposite.setLayoutData(gridData2);
	}



	/**
	 * This method initializes containerComposite	
	 *
	 */
	private void createContainerComposite() {
		containerComposite = new Composite(getMainContainerComposite(), SWT.NONE);
		containerComposite.setLayout(new FillLayout());
	//	containerComposite.setData(YRCConstants.YRC_CONTROL_CUSTOMTYPE, "Composite");
		createPackContainerComposite();
		createContainerDetailsComposite();
	}

	/**
	 * This method initializes packContainerComposite	
	 *
	 */
	private void createPackContainerComposite() {
		GridLayout gridLayout13 = new GridLayout();
		gridLayout13.numColumns = 1;
		packContainerComposite = new Composite(containerComposite, SWT.NONE);
		packContainerComposite.setData(YRCConstants.YRC_CONTROL_NAME,
		"packContainerComposite");
		packContainerComposite.setData(YRCConstants.YRC_CONTROL_CUSTOMTYPE, "Composite");
		createHeaderPackcomposite();
		createContainerEntryDtlscomposite();
		packContainerComposite.setLayout(gridLayout13);
		createCmpPrinterCombos();
	}

	/**
	 * This method initializes containerDetailsComposite	
	 *
	 */
	private void createContainerDetailsComposite() {
		GridLayout gridLayout7 = new GridLayout();
		gridLayout7.marginHeight = 5;
		gridLayout7.horizontalSpacing = 5;
		gridLayout7.verticalSpacing = 5;
		gridLayout7.marginWidth = 5;
		containerDetailsComposite = new Composite(containerComposite, SWT.NONE);
		containerDetailsComposite.setData(YRCConstants.YRC_CONTROL_CUSTOMTYPE, "Composite");
		
		containerDetailsComposite.setLayout(gridLayout7);
		createHeaderCtnDtlscomposite();
		createCtnNoTotalWtcomposite();
		createComposite2();
		createContainerDetailButtonsComposite();
	}

	/**
	 * This method initializes headerPackcomposite	
	 *
	 */
	private void createHeaderPackcomposite() {
		GridLayout gridLayout12 = new GridLayout();
		gridLayout12.verticalSpacing = 0;
		GridData gridData16 = new GridData();
		gridData16.horizontalAlignment = GridData.FILL;
		gridData16.grabExcessHorizontalSpace = true;
		gridData16.widthHint = -1;
		gridData16.grabExcessVerticalSpace = false;
		gridData16.verticalAlignment = GridData.FILL;
		headerPackcomposite = new Composite(packContainerComposite,
				SWT.NONE);
		headerPackcomposite.setData(YRCConstants.YRC_CONTROL_CUSTOMTYPE, "PanelHeader");
		headerPackcomposite.setLayoutData(gridData16);
		headerPackcomposite.setLayout(gridLayout12);
		lblPackContainer = new Label(headerPackcomposite, SWT.NONE);
		lblPackContainer.setData(YRCConstants.YRC_CONTROL_CUSTOMTYPE, "PanelHeader");
		lblPackContainer.setText("Pack Container");
	}

	/**
	 * This method initializes ContainerEntryDtlscomposite	
	 *
	 */
	private void createContainerEntryDtlscomposite() {
		GridData gridData18 = new GridData();
		gridData18.horizontalAlignment = GridData.FILL;
		gridData18.verticalAlignment = GridData.CENTER;
		GridData gridData5 = new GridData();
		gridData5.horizontalAlignment = GridData.END;
		gridData5.grabExcessHorizontalSpace = true;
		gridData5.verticalAlignment = GridData.CENTER;
		GridData gridData26 = new GridData();
		gridData26.horizontalAlignment = GridData.FILL;
		gridData26.grabExcessVerticalSpace = true;
		gridData26.grabExcessHorizontalSpace = true;
		gridData26.horizontalSpan = 2;
		gridData26.verticalAlignment = GridData.CENTER;
		GridData gridData25 = new GridData();
		gridData25.horizontalAlignment = GridData.FILL;
		gridData25.grabExcessVerticalSpace = true;
		gridData25.grabExcessHorizontalSpace = true;
		gridData25.horizontalSpan = 2;
		gridData25.verticalAlignment = GridData.CENTER;
		GridData gridData24 = new GridData();
		gridData24.horizontalAlignment = GridData.END;
		gridData24.grabExcessVerticalSpace = true;
		gridData24.grabExcessHorizontalSpace = true;
		gridData24.verticalAlignment = GridData.CENTER;
		GridData gridData23 = new GridData();
		gridData23.horizontalAlignment = GridData.END;
		gridData23.grabExcessVerticalSpace = true;
		gridData23.grabExcessHorizontalSpace = true;
		gridData23.verticalAlignment = GridData.CENTER;
		GridData gridData20 = new GridData();
		gridData20.horizontalAlignment = GridData.FILL;
		gridData20.grabExcessVerticalSpace = true;
		gridData20.grabExcessHorizontalSpace = true;
		gridData20.verticalAlignment = GridData.CENTER;
		GridLayout gridLayout8 = new GridLayout();
		gridLayout8.numColumns = 3;
		gridLayout8.makeColumnsEqualWidth = true;
		GridData gridData17 = new GridData();
		gridData17.horizontalAlignment = GridData.CENTER;
		gridData17.grabExcessVerticalSpace = false;
		gridData17.grabExcessHorizontalSpace = true;
		gridData17.verticalAlignment = GridData.FILL;
		ContainerEntryDtlscomposite = new Composite(packContainerComposite,
				SWT.NONE);
		ContainerEntryDtlscomposite.setLayoutData(gridData17);
		ContainerEntryDtlscomposite.setLayout(gridLayout8);
		lblContainerType = new Label(ContainerEntryDtlscomposite, SWT.NONE);
		lblContainerType.setText("Container Type");
		lblContainerType.setLayoutData(gridData20);
		createCmbContainerType();
		lblContainerNo = new Label(ContainerEntryDtlscomposite, SWT.NONE);
		lblContainerNo.setText("Container#");
		lblContainerNo.setLayoutData(gridData23);
		txtContainerNo = new Text(ContainerEntryDtlscomposite, SWT.BORDER);
		txtContainerNo.setLayoutData(gridData25);
		lblPackStationNo = new Label(ContainerEntryDtlscomposite, SWT.NONE);
		lblPackStationNo.setText("PackStation#");
		lblPackStationNo.setLayoutData(gridData23);
		txtPackStationNo = new Text(ContainerEntryDtlscomposite, SWT.BORDER);
		txtPackStationNo.setLayoutData(gridData25);
		lblItemID = new Label(ContainerEntryDtlscomposite, SWT.NONE);
		lblItemID.setText("Scan_SKU_UPC");
		lblItemID.setLayoutData(gridData24);
		lblItemID.setData(YRCConstants.YRC_CONTROL_NAME, "lblItemID");
		txtItemID = new Text(ContainerEntryDtlscomposite, SWT.BORDER);
		txtItemID.setLayoutData(gridData26);
		lblQtyNo = new Label(ContainerEntryDtlscomposite, SWT.NONE);
		lblQtyNo.setText("Qty");
		lblQtyNo.setLayoutData(gridData5);
		txtQtyOne = new Text(ContainerEntryDtlscomposite, SWT.BORDER);
		txtQtyOne.setText("1");
		txtQtyOne.setEditable(false);
		txtQtyOne.setLayoutData(gridData18);
		
	}

	/**
	 * This method initializes cmbContainerType	
	 *
	 */
	private void createCmbContainerType() {
		GridData gridData22 = new GridData();
		gridData22.horizontalAlignment = GridData.FILL;
		gridData22.grabExcessVerticalSpace = true;
		gridData22.grabExcessHorizontalSpace = true;
		gridData22.horizontalSpan = 2;
		gridData22.verticalAlignment = GridData.CENTER;
		cmbContainerType = new Combo(ContainerEntryDtlscomposite, SWT.READ_ONLY);
		cmbContainerType.setData(YRCConstants.YRC_CONTROL_NAME,"cmbContainerType");
		cmbContainerType.setData(YRCConstants.YRC_CONTROL_CUSTOMTYPE, "Combo");
		cmbContainerType.setLayoutData(gridData22);
	}

	/**
	 * This method initializes HeaderItemListComposite	
	 *
	 */
	private void createHeaderItemListComposite() {
		GridData gridData19 = new GridData();
		gridData19.horizontalAlignment = GridData.END;
		gridData19.grabExcessHorizontalSpace = true;
		gridData19.widthHint = 150;
		gridData19.grabExcessVerticalSpace = true;
		gridData19.heightHint = 25;
		gridData19.verticalAlignment = GridData.CENTER;
		GridLayout gridLayout5 = new GridLayout();
		gridLayout5.numColumns = 3;
		gridLayout5.marginWidth = 5;
		gridLayout5.verticalSpacing = 0;
		gridLayout5.horizontalSpacing = 0;
		GridData gridData13 = new GridData();
		gridData13.horizontalAlignment = GridData.BEGINNING;
		gridData13.grabExcessHorizontalSpace = true;
		gridData13.grabExcessVerticalSpace = false;
		gridData13.verticalAlignment = GridData.CENTER;
		GridData gridData36 = new GridData();
		gridData36.horizontalAlignment = GridData.FILL;
		gridData36.grabExcessHorizontalSpace = true;
		gridData36.verticalAlignment = GridData.FILL;
		HeaderItemListComposite = new Composite(mainComposite, SWT.NONE);
		
		HeaderItemListComposite.setLayoutData(gridData36);
		HeaderItemListComposite.setLayout(gridLayout5);
		HeaderItemListComposite.setData(YRCConstants.YRC_CONTROL_CUSTOMTYPE, "PanelHeader");
		lblItemList = new Label(HeaderItemListComposite, SWT.NONE);
		lblItemList.setData(YRCConstants.YRC_CONTROL_CUSTOMTYPE, "PanelHeader");
		lblItemList.setText("Item List");
		lblItemList.setLayoutData(gridData13);
		btnRecordShortage = new Button(HeaderItemListComposite, SWT.NONE);
		btnRecordShortage.setText("Record_Shortage");
		btnRecordShortage.setLayoutData(gridData19);
	}

	/**
	 * This method initializes headerCtnDtlscomposite	
	 *
	 */
	private void createHeaderCtnDtlscomposite() {
		GridData gridData35 = new GridData();
		gridData35.horizontalAlignment = GridData.FILL;
		gridData35.grabExcessHorizontalSpace = false;
		gridData35.verticalAlignment = GridData.CENTER;
		GridData gridData27 = new GridData();
		gridData27.horizontalAlignment = GridData.FILL;
		gridData27.grabExcessHorizontalSpace = true;
		gridData27.verticalAlignment = GridData.FILL;
		GridLayout gridLayout9 = new GridLayout();
		gridLayout9.verticalSpacing = 0;
		headerCtnDtlscomposite = new Composite(containerDetailsComposite, SWT.NONE);
		headerCtnDtlscomposite.setData(YRCConstants.YRC_CONTROL_CUSTOMTYPE, "PanelHeader");
		headerCtnDtlscomposite.setLayout(gridLayout9);
		headerCtnDtlscomposite.setLayoutData(gridData27);
		lblCtnDetailsHeader = new Label(headerCtnDtlscomposite, SWT.NONE);
		lblCtnDetailsHeader.setData(YRCConstants.YRC_CONTROL_CUSTOMTYPE, "PanelHeader");
		lblCtnDetailsHeader.setText("Container Details");
		lblCtnDetailsHeader.setLayoutData(gridData35);
	}

	/**
	 * This method initializes CtnNoTotalWtcomposite	
	 *
	 */
	private void createCtnNoTotalWtcomposite() {
		GridData gridData33 = new GridData();
		gridData33.horizontalAlignment = GridData.FILL;
		gridData33.grabExcessHorizontalSpace = true;
		gridData33.grabExcessVerticalSpace = true;
		gridData33.verticalAlignment = GridData.CENTER;
		GridData gridData32 = new GridData();
		gridData32.horizontalAlignment = GridData.END;
		gridData32.grabExcessHorizontalSpace = true;
		gridData32.verticalAlignment = GridData.CENTER;
		GridData gridData29 = new GridData();
		gridData29.horizontalAlignment = GridData.END;
		gridData29.grabExcessHorizontalSpace = true;
		gridData29.verticalAlignment = GridData.CENTER;
		GridLayout gridLayout9 = new GridLayout();
		gridLayout9.numColumns = 4;
		gridLayout9.makeColumnsEqualWidth = true;
		GridData gridData28 = new GridData();
		gridData28.grabExcessHorizontalSpace = false;
		gridData28.verticalAlignment = GridData.CENTER;
		gridData28.horizontalAlignment = GridData.FILL;
		CtnNoTotalWtcomposite = new Composite(containerDetailsComposite, SWT.NONE);
		CtnNoTotalWtcomposite.setLayoutData(gridData28);
		CtnNoTotalWtcomposite.setLayout(gridLayout9);
		lblCtnDetailsNo = new Label(CtnNoTotalWtcomposite, SWT.NONE);
		lblCtnDetailsNo.setText("Container#");
		lblCtnDetailsNo.setLayoutData(gridData29);
		createCmbCtnDetailsNo();
		lblTotalWeight = new Label(CtnNoTotalWtcomposite, SWT.NONE);
		lblTotalWeight.setText("Total Weight");
		lblTotalWeight.setLayoutData(gridData32);
		txtWeightNo = new Text(CtnNoTotalWtcomposite, SWT.BORDER);
		txtWeightNo.setEditable(false);
		txtWeightNo.setLayoutData(gridData33);
	}
	
	/**
	 * This method initializes cmbCtnDetailsNo	
	 *
	 */
	private void createCmbCtnDetailsNo() {
		GridData gridData30 = new GridData();
		gridData30.horizontalAlignment = GridData.FILL;
		gridData30.grabExcessHorizontalSpace = true;
		gridData30.verticalAlignment = GridData.CENTER;
		cmbCtnDetailsNo = new Combo(CtnNoTotalWtcomposite, SWT.READ_ONLY);
		cmbCtnDetailsNo.setLayoutData(gridData30);
	}
	
	/**
	 * This method initializes composite	
	 *
	 */
	private void createComposite2() {
		GridData gridData1 = new GridData();
		gridData1.grabExcessHorizontalSpace = false;
		gridData1.verticalAlignment = GridData.CENTER;
		gridData1.widthHint = -1;
		gridData1.heightHint = 3;
		gridData1.horizontalAlignment = GridData.FILL;
		GridData gridData32 = new GridData();
		gridData32.horizontalAlignment = GridData.FILL;
		gridData32.grabExcessHorizontalSpace = true;
		gridData32.grabExcessVerticalSpace = true;
		gridData32.verticalAlignment = GridData.FILL;
		GridData gridData30 = new GridData();
		gridData30.horizontalAlignment = GridData.FILL;
		gridData30.grabExcessHorizontalSpace = false;
		gridData30.grabExcessVerticalSpace = true;
		gridData30.verticalAlignment = GridData.FILL;
		GridLayout gridLayout11 = new GridLayout();
		gridLayout11.numColumns = 1;
		gridLayout11.verticalSpacing = 3;
		gridLayout11.marginHeight = 3;
		gridLayout11.marginWidth = 0;
		gridLayout11.horizontalSpacing = 8;
		containerItemListComposite = new Composite(containerDetailsComposite, SWT.NONE  | SWT.V_SCROLL | SWT.H_SCROLL);
		containerItemListComposite.setLayout(gridLayout11);
		containerItemListComposite.setLayoutData(gridData30);
		lblSeparator = new Label(containerItemListComposite, SWT.NONE);
		lblSeparator.setText("");
		lblSeparator.setLayoutData(gridData1);
		lblSeparator.setData(YRCConstants.YRC_CONTROL_CUSTOMTYPE, "PanelHeader");
		tblContainerDetails = new Table(containerItemListComposite, SWT.NONE);
		tblContainerDetails.setData(YRCConstants.YRC_CONTROL_CUSTOMTYPE, "Table");
		tblContainerDetails.setHeaderVisible(true);
		tblContainerDetails.setLayoutData(gridData32);
		tblContainerDetails.setLinesVisible(true);
		TableColumn tblClmContainerItemID = new TableColumn(tblContainerDetails, SWT.NONE);
		tblClmContainerItemID.setWidth(80);
		tblClmContainerItemID.setText("ItemID");
		TableColumn tblClmContainerItemDesc = new TableColumn(tblContainerDetails, SWT.NONE);
		tblClmContainerItemDesc.setWidth(150);
		tblClmContainerItemDesc.setText("Item Desc");
		TableColumn tblClmContainerUOM = new TableColumn(tblContainerDetails, SWT.NONE);
		tblClmContainerUOM.setWidth(80);
		tblClmContainerUOM.setText("UOM");
		TableColumn tblClmContainerQtyPacked = new TableColumn(tblContainerDetails, SWT.NONE);
		tblClmContainerQtyPacked.setWidth(80);
		tblClmContainerQtyPacked.setText("Qty Packed");
	}

	/**
	 * This method initializes containerDetailButtonsComposite	
	 *
	 */
	private void createContainerDetailButtonsComposite() {
	
//		Drop2 - Reprint Label Functionality - Start
		GridData gridData35 = new GridData();
		gridData35.horizontalAlignment = GridData.CENTER;
		gridData35.grabExcessHorizontalSpace = true;
		gridData35.horizontalSpan = 2;
		gridData35.widthHint = 125;
		gridData35.heightHint = 25;
		gridData35.verticalAlignment = GridData.CENTER;
//		Drop2 - Reprint Label Functionality - End	
		GridData gridData34 = new GridData();
		gridData34.horizontalAlignment = GridData.CENTER;
		gridData34.grabExcessHorizontalSpace = true;
		gridData34.horizontalSpan = 2;
		gridData34.widthHint = 125;
		gridData34.heightHint = 25;
		gridData34.verticalAlignment = GridData.CENTER;

		GridData gridData33 = new GridData();
		gridData33.horizontalSpan = 2;
		gridData33.horizontalAlignment = GridData.CENTER;
		gridData33.verticalAlignment = GridData.CENTER;
		gridData33.widthHint = 125;
		gridData33.heightHint = 25;
		gridData33.grabExcessHorizontalSpace = true;

		GridData gridData29 = new GridData();
		gridData29.horizontalAlignment = GridData.FILL;
		gridData29.grabExcessHorizontalSpace = false;
		gridData29.grabExcessVerticalSpace = false;
		gridData29.verticalAlignment = GridData.END;

		GridLayout gridLayout10 = new GridLayout();
		gridLayout10.numColumns = 6;
		gridLayout10.makeColumnsEqualWidth = true;

		containerDetailButtonsComposite = new Composite(containerDetailsComposite,
				SWT.NONE);
		containerDetailButtonsComposite.setLayout(gridLayout10);
		containerDetailButtonsComposite.setLayoutData(gridData29);

		btnRemoveContainer = new Button(containerDetailButtonsComposite, SWT.NONE);
		btnRemoveContainer.setText("Remove Container");
		btnRemoveContainer.setLayoutData(gridData34);

//		Drop2 - Reprint Label Functionality - Start
		btnReprintLabel = new Button(containerDetailButtonsComposite, SWT.NONE);
//		Start changes for SFS June Release
		btnReprintLabel.setText("Reprint Label/Collate");
		//btnReprintLabel.setText("Reprint Label");
		//End changes for SFS June Release
		btnReprintLabel.setLayoutData(gridData35);		
//		Drop2 - Reprint Label Functionality - End
		btnCloseContainer = new Button(containerDetailButtonsComposite, SWT.NONE);
		btnCloseContainer.setText("Close Container");
		btnCloseContainer.setLayoutData(gridData33);
		
	}

	public IYRCPanelHolder getPanelHolder() {
		// TODO Auto-generated method stub
		return null;
	}
	
	void enableField(String ctrlName, boolean enable) {
		Control ctrl = myBehavior.getControl(ctrlName);
		if(null != ctrl)
			ctrl.setEnabled(enable);
	}
  
	//<!-- Start - Drop2 changes -->
	public void promptUserForWeightCalculation(String strScaleConnectionMessage) {
		
		KOHLSWeightRequiredPopup composite = new KOHLSWeightRequiredPopup(this,SWT.None, strScaleConnectionMessage);
		YRCDialog dialog = new YRCDialog(composite, 460, 130, "Weight Container", "");
		dialog.open();
	}
	//<!-- End - Drop2 changes -->

	/**
	 * This method initializes cmpPrinterCombos	
	 *
	 */
	private void createCmpPrinterCombos() {
		
		GridLayout gridLayout10 = new GridLayout();
		gridLayout10.numColumns = 2;
		gridLayout10.makeColumnsEqualWidth = false;
		
		cmpPrinterCombos = new Composite(packContainerComposite, SWT.NONE);
		cmpPrinterCombos.setLayout(gridLayout10);
		lblPackPrinter = new Label(cmpPrinterCombos, SWT.NONE);
		lblPackPrinter.setText(YRCPlatformUI.getString("SELECT_PACK_PRINTER"));
		createCmbPackPrinter();
		lblLabelPrinter = new Label(cmpPrinterCombos, SWT.NONE);
		lblLabelPrinter.setText(YRCPlatformUI.getString("SELECT_LABEL_PRINTER"));
		createCmbLabelPrinter();
	}

	/**
	 * This method initializes cmbPackPrinter	
	 *
	 */
	private void createCmbPackPrinter() {
		cmbPackPrinter = new Combo(cmpPrinterCombos, SWT.READ_ONLY);
	}

	/**
	 * This method initializes cmbLabelPrinter	
	 *
	 */
	private void createCmbLabelPrinter() {
		cmbLabelPrinter = new Combo(cmpPrinterCombos, SWT.READ_ONLY);
	}
}
