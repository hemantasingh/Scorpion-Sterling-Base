package com.kohls.ibm.ocf.pca.util;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import com.kohls.ibm.ocf.pca.util.KohlsMettlerToledoScale;
import com.yantra.yfc.rcp.YRCPlatformUI;
import com.yantra.yfc.rcp.YRCUIUtils;
import com.yantra.yfc.rcp.YRCUserDetails;
import com.yantra.yfc.rcp.common.utils.YRCCommonUtils;
import com.yantra.yfc.rcp.internal.YRCUserResources;
import com.yantra.yfc.util.YFCException;
import com.yantra.yfs.japi.YFSEnvironment;
import org.w3c.dom.NodeList;

public class KohlsCommonUtil {
    //
    /**
     * A utility method that creates the input <code>DeviceParamsXML</code>
     * document to initialize the weighing scale. The output generated by the
     * method is of the following format:
     * <p/>
     * 
     * <code>
     * &lt;DeviceParamsXML&gt;<br/>
     * &nbsp;&lt;Attributes&gt;<br/>
     * &nbsp;&nbsp;&lt;AttributeName=&quot;ClassName&quot; Value=&quot;&quot; &gt;<br/>
     * &nbsp;&nbsp;&lt;AttributeName=&quot;PortId&quot; Value=&quot;&quot; &gt;<br/>
     * &nbsp;&nbsp;&lt;AttributeName=&quot;BaudRate&quot; Value=&quot;&quot; &gt;<br/>
     * &nbsp;&nbsp;&lt;AttributeName=&quot;DataBits&quot; Value=&quot;&quot; &gt;<br/>
     * &nbsp;&nbsp;&lt;AttributeName=&quot;StopBits&quot; Value=&quot;&quot; &gt;<br/>
     * &nbsp;&nbsp;&lt;AttributeName=&quot;Parity&quot; Value=&quot;&quot; &gt;<br/>
     * &nbsp;&nbsp;&lt;AttributeName=&quot;FlowIn&quot; Value=&quot;&quot; &gt;<br/>
     * &nbsp;&nbsp;&lt;AttributeName=&quot;FlowOut&quot; Value=&quot;&quot; &gt;<br/>
     * &nbsp;&nbsp;&lt;AttributeName=&quot;&quot; Value=&quot;&quot; &gt;<br/>
     * &nbsp;&lt;/Attributes&gt;<br/>
     * &lt;/DeviceParamsXML&gt;<br/>
     * </code>
     * 
     * @param port
     *            the COM port to which the scale is attached
     * @param baudRate
     *            the baud rate of the scale
     * @param databits
     *            the data bits used by the scale
     * @param stopbits
     *            the stop bits used by the scale
     * @param parity
     *            whether or not parity is used by the scale
     * @param flowIn
     *            whether or not the scale uses flow in
     * @param flowOut
     *            whether of not the scale uses flow out
     * @param highRes
     *            whether or not the scale uses high resolution
     * @return a <code>DeviceParamsXML</code> to feed to the scale factory
     * @throws YFCException
     *             if errors occur making the XML.
     */
    public final static Document getParams(final String port, int baudRate,
            int databits, int stopbits, final String parity,
            final String flowIn, final String flowOut, final String highRes) {
        //
        DocumentBuilderFactory factory = null;
        DocumentBuilder builder = null;
        Document out = null;
        Element deviceParams = null;
        Element attributes = null;
        Element attribute = null;
        try {
            factory = DocumentBuilderFactory.newInstance();
            builder = factory.newDocumentBuilder();
            out = builder.newDocument();
            deviceParams = out.createElement("DeviceParamsXML");
            out.appendChild(deviceParams);
            attributes = out.createElement("Attributes");
            deviceParams.appendChild(attributes);
            //
            // ClassName
            attribute = out.createElement("Attribute");
            attribute.setAttribute("Name", "ClassName");
            attribute.setAttribute("Value",
                    KohlsMettlerToledoScale.class.getName());
            attributes.appendChild(attribute);
            //
            // PortId
            attribute = out.createElement("Attribute");
            attribute.setAttribute("Name", "PortId");
            attribute.setAttribute("Value", port);
            attributes.appendChild(attribute);
            //
            // BaudRate
            attribute = out.createElement("Attribute");
            attribute.setAttribute("Name", "BaudRate");
            attribute.setAttribute("Value", baudRate + "");
            attributes.appendChild(attribute);
            //
            // DataBits
            attribute = out.createElement("Attribute");
            attribute.setAttribute("Name", "DataBits");
            attribute.setAttribute("Value", databits + "");
            attributes.appendChild(attribute);
            //
            // StopBits
            attribute = out.createElement("Attribute");
            attribute.setAttribute("Name", "StopBits");
            attribute.setAttribute("Value", stopbits + "");
            attributes.appendChild(attribute);
            //
            // Parity
            attribute = out.createElement("Attribute");
            attribute.setAttribute("Name", "Parity");
            attribute.setAttribute("Value", parity);
            attributes.appendChild(attribute);
            //
            // FlowIn
            attribute = out.createElement("Attribute");
            attribute.setAttribute("Name", "FlowIn");
            attribute.setAttribute("Value", flowIn);
            attributes.appendChild(attribute);
            //
            // FlowOut
            attribute = out.createElement("Attribute");
            attribute.setAttribute("Name", "FlowOut");
            attribute.setAttribute("Value", flowOut);
            attributes.appendChild(attribute);
            //
            // HighRes
            attribute = out.createElement("Attribute");
            attribute.setAttribute("Name", "HighResolutionData");
            attribute.setAttribute("Value", highRes);
            attributes.appendChild(attribute);
            //
            return out;
            //
        } catch (ParserConfigurationException ex) {
            // TODO -- log exception
            final YFCException yfce = new YFCException(ex);
            yfce.setStackTrace(ex.getStackTrace());
            throw yfce;
        }
    }// getParams:Document

    public static boolean getUserList()
    {		Element eleUserNameSpace=YRCPlatformUI.getUserElement();
    		String str=null;
    		boolean flag=false;
    	    NodeList eleUserNameSpaceList= eleUserNameSpace.getElementsByTagName("UserGroupList");
    	    int length=eleUserNameSpaceList.getLength();
    	    if(length==1)
    	    {
    	    	Element eleUserGroupDetails = ((Element) eleUserNameSpaceList.item(0));
    	    	NodeList eleUserList=eleUserGroupDetails.getElementsByTagName("UserGroup");
    	    	Element eleUserGroupDetails1=null;
    	    	int length1=eleUserList.getLength();
    	    	for(int j=0;j<length1;j++)
    	    	{
    	    		eleUserGroupDetails1=(Element)eleUserList.item(j);
    	    		 str=eleUserGroupDetails1.getAttribute("UsergroupId");
    	    	}
    	    	   if(str.equalsIgnoreCase("CorporateRead-Only Access"))
    	    	    {
    	    	    	flag=true;
    	    	    }
    	    }
    	 
    	    	
		return flag;
    	
    }
}// class:KohlsCommonUtil
