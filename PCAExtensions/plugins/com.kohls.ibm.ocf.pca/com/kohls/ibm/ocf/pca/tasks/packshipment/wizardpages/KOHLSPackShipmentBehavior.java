/*
 * Created on May 22,2012
 *
 */
package com.kohls.ibm.ocf.pca.tasks.packshipment.wizardpages;

import java.util.ArrayList;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPathConstants;

import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Combo;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.kohls.ibm.ocf.pca.rcp.KohlsApplicationInitializer;
import com.kohls.ibm.ocf.pca.tasks.packshipment.actions.KOHLSPackShipmentContainerCloseAction;
import com.kohls.ibm.ocf.pca.tasks.packshipment.actions.KOHLSPackShipmentContainerRemoveAction;
import com.kohls.ibm.ocf.pca.tasks.packshipment.actions.KOHLSPackShipmentContainerReprintLabelAction;
import com.kohls.ibm.ocf.pca.tasks.packshipment.popups.KOHLSRecordShortagePopup;
import com.kohls.ibm.ocf.pca.tasks.siminiproperties.wizardpages.KOHLSSIMPropertiesPageBehavior;
import com.kohls.ibm.ocf.pca.util.KOHLSInputXMLUtils;
import com.kohls.ibm.ocf.pca.util.KOHLSPCAApiNames;
import com.kohls.ibm.ocf.pca.util.KOHLSPCAConstants;
import com.kohls.ibm.ocf.pca.util.KOHLSPCAUtils;
import com.kohls.ibm.ocf.pca.util.KOHLSPrintOption;
import com.kohls.ibm.ocf.pca.util.KohlsLabelPrinter;
import com.yantra.yfc.rcp.YRCApiContext;
import com.yantra.yfc.rcp.YRCDialog;
import com.yantra.yfc.rcp.YRCEditorInput;
import com.yantra.yfc.rcp.YRCPlatformUI;
import com.yantra.yfc.rcp.YRCWizardPageBehavior;
import com.yantra.yfc.rcp.YRCXPathUtils;
import com.yantra.yfc.rcp.YRCXmlUtils;

/**
 * @author admin
 * 
 * Generated by RCP Tools
 */

public class KOHLSPackShipmentBehavior extends YRCWizardPageBehavior {

	private static String WIZARD_ID = "com.kohls.ibm.ocf.pca.tasks.packshipment.wizards.KOHLSPackShipmentWizard";

	private static final int STATUS_INVALID_ITEM = 0; // item does not exist in the system,rescan

	private static final int STATUS_VALID_ITEM_NOT_IN_SHIPMENT = 1; // item exists but not part of shipment

	private static final int STATUS_VALID_ITEM_TO_PACK = 2; // valid item and can to be packed

	private static final int STATUS_VALID_ITEM_ALREADY_PACKED = 3; // valid item  already  packed
	
	private static final int STATUS_VALID_CONTAINER_ITEM_SCANNED=4;//valid container type exists

    private boolean boolgetFocus = false;
    
    private KOHLSPackShipmentPage parent;
    
    private String strPrinterID="";

	private String strLatestContainerNo="";

	private boolean isSingleShipment;

	private String singleShipmentContainerTypeID;
	
	Element eleEditorInput;
	
	Document proshiplableresdoc=null;
	
//	private final String strDefaultPrinter = KOHLSPCAConstants.INI_PROPERTY_DEFAULT_PRINTER;
	private final String strDefaultLablePrinter = KOHLSPCAConstants.INI_PROPERTY_DEFAULT_LABEL_PRINTER;
	private final String strDefaultPackPrinter = KOHLSPCAConstants.INI_PROPERTY_DEFAULT_PACK_PRINTER;
	
	private final String strDefaultPackStation = KOHLSPCAConstants.INI_PROPERTY_PACK_STATION;
	
	private String strPrintLabelFormat = "";

	private Document outputContainerDetailsXML;
    

	/**
	 * Constructor for the behavior class.
	 */

	public KOHLSPackShipmentBehavior(Composite parent, String formId, Object wizardInput) {
		super(parent);
		this.parent=(KOHLSPackShipmentPage) parent;
		
		if(!YRCPlatformUI.isVoid(wizardInput))
		eleEditorInput=(Element)((YRCEditorInput)wizardInput).getXml();
		init();
	}

	/**
	 * This method initializes the behavior class.
	 */
	public void init() {
		YRCPlatformUI.setMessage("");
		setDefaultPrinterID(getDefaultPrinterID());
		
	  if(!YRCPlatformUI.isVoid(eleEditorInput)){
		  String strShipmentNo=eleEditorInput.getAttribute(KOHLSPCAConstants.A_SHIPMENT_NO);
		  
		  if(!YRCPlatformUI.equals(strShipmentNo,KOHLSPCAConstants.V_BLANK))
		    searchShipmentLineList(strShipmentNo);
	  }
		

	}
	


	//<!-- Start - Drop2 changes -->
//	private void setPrinterList() {
//		// TODO Auto-generated method stub
//			String strDefaultPrinterID = KohlsApplicationInitializer.getTerminalPropertyForUISession(strDefaultPrinter);
//			KOHLSPCAUtils.rearrangePrinterID(KohlsApplicationInitializer.elePrinterDevices, strDefaultPrinterID);
//			Element eleDeviceList = KohlsApplicationInitializer.elePrinterDevices;
//			this.setModel("getDeviceList",eleDeviceList);
//	}
	//<!-- End - Drop2 changes -->
	/**
	 * Method to set Default Label Printer from the Cache
	 */
	private void setDefaultLablePrinterList() {
		// TODO Auto-generated method stub

			String strDefaultPrinterID = KohlsApplicationInitializer.getTerminalPropertyForUISession(strDefaultLablePrinter);
			KOHLSPCAUtils.rearrangePrinterID(KohlsApplicationInitializer.elePrinterDevices, strDefaultPrinterID);
			Element eleDeviceList = KohlsApplicationInitializer.elePrinterDevices;
			this.setModel("getDeviceListLablePrinter",eleDeviceList);
	}
	/**
	 * Method to set Default Pack Printer from the Cache
	 */
	private void setDefaultPackPrinterList() {
		// TODO Auto-generated method stub
			String strDefaultPrinterID = KohlsApplicationInitializer.getTerminalPropertyForUISession(strDefaultPackPrinter);
			KOHLSPCAUtils.rearrangePrinterID(KohlsApplicationInitializer.elePrinterDevices, strDefaultPrinterID);
			Element eleDeviceList = KohlsApplicationInitializer.elePrinterDevices;
			this.setModel("getDeviceListPackPrinter",eleDeviceList);
	}
	@Override
	public void handleApiCompletion(YRCApiContext ctx) {

		if (ctx.getInvokeAPIStatus() < 1) {
			YRCPlatformUI.trace("API exception in " + getFormId()
					+ " page, ApiName " + ctx.getApiName() + ",Exception : ",
					ctx.getException());
			if(ctx.getApiName().equals(KOHLSPCAApiNames.API_KOHLS_ADD_CONTAINER_TO_SHIPMENT_SERVICE))
			{
				refreshScreenAfterVoidOrClose();
			}
				

		} else {
			
			//Start changes for SFS June Release
			
			if (ctx.getApiName().equals(KOHLSPCAApiNames.API_REPRINT_PACK_SLIP_SERVICE)) {
				YRCPlatformUI.trace(
						"The command name is "+KOHLSPCAApiNames.API_REPRINT_PACK_SLIP_SERVICE,
						null);
				
				if(!YRCPlatformUI.isVoid(KOHLSPCAUtils.getDefaultPrinterID())){
					boolean printed = true;
					Element elePrintPackDocs = ctx.getOutputXml().getDocumentElement();
					NodeList ShipmentList = elePrintPackDocs.getElementsByTagName(KOHLSPCAConstants.E_SHIPMENT);
					for(int k=0;k<ShipmentList.getLength();k++)
					{  try{
						String strcollateno=getFieldValue("cmbCtnDetailsNo");
						Element eleShipment = (Element) ShipmentList.item(k);
						Element elecontainers=YRCXmlUtils.getChildElement(eleShipment, "Containers");
						Element elecontainer=YRCXmlUtils.getChildElement(elecontainers, "Container");
						String strcontno=elecontainer.getAttribute("ContainerNo");
						if(strcollateno.equalsIgnoreCase(strcontno))
						{
							DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
							Document inputPrintdoc = builder.newDocument();
							Element eleImported = (Element) inputPrintdoc.importNode(eleShipment, true);
							inputPrintdoc.appendChild(eleImported);
							KOHLSPrintOption kohlobj = new KOHLSPrintOption();
				        	inputPrintdoc.getDocumentElement().setAttribute("IsCollateReq", "Y");
				        	kohlobj.executemethod(inputPrintdoc,proshiplableresdoc);
						}
						
						
					}catch(Exception ex)
					{
						YRCPlatformUI.trace( "Got the following Error While Printing Report" +  KOHLSPCAUtils.getStringTrace(ex));
						printed = false;
					}

					}
					if(printed)
					{
						YRCPlatformUI.setMessage(YRCPlatformUI.getFormattedString(YRCPlatformUI.getString("REPRINT_PACK_SLIP_PRINT_INFO"), new String[]{KOHLSPCAUtils.getDefaultPrinterID()}));
					}else
					{
						YRCPlatformUI.setMessage(YRCPlatformUI.getFormattedString(YRCPlatformUI.getString("REPRINT_PACK_SLIP_PRINT_ERROR_INFO"), new String[]{KOHLSPCAUtils.getDefaultPrinterID()}));
					}

				}




			}

			
			
			//End changes for SFS June Release
			
			
			
			
			
			if(ctx.getApiName().equals(KOHLSPCAApiNames.API_KOHLS_MODIFY_STORE_SHIPMENT)){
				refreshScreenAfterVoidOrClose();	
			}

			if (ctx.getApiName()
					.equals(KOHLSPCAApiNames.API_TRANSLATE_BAR_CODE)) {
				YRCPlatformUI.trace("The command name is "
						+ KOHLSPCAApiNames.API_TRANSLATE_BAR_CODE, null);
				Element eOutputTranslateBarCode = ctx.getOutputXml()
						.getDocumentElement();

				Element eGetShipmentLineList_OutputModel = getModel("getShipmentLineList_Output");
				try {
					if (!(YRCPlatformUI.isVoid(eOutputTranslateBarCode) || YRCPlatformUI
							.isVoid(eGetShipmentLineList_OutputModel))) {

						setFieldValue("txtItemID", "");
						getControl("txtItemID").setFocus();

						setModel("translateBarCode_Output",
								eOutputTranslateBarCode);
						handleScannedItem(validateScannedItem(
								eOutputTranslateBarCode,
								getModel("getShipmentLineList_Output")));

					}
				} catch (Exception e) {
					e.printStackTrace();
				}
				if(isFromScale()){
				setFieldValue("txtWeightNo", "");
				}
			}

			if (ctx.getApiName().equals(
					KOHLSPCAApiNames.API_GET_SHIPMENT_DETAILS_FOR_PC)) {
				YRCPlatformUI.trace("The command name is "
						+ KOHLSPCAApiNames.API_GET_SHIPMENT_DETAILS_FOR_PC,
						null);

				Element eOutputShipmentDetails = ctx.getOutputXml()
						.getDocumentElement();

				String strIsRefresh = (String)ctx.getUserData("IsRefresh");
				if(null == strIsRefresh)
					strIsRefresh = "";
				
				try {
					if (!(YRCPlatformUI.isVoid(eOutputShipmentDetails))) {
						processGetShipmentDetailsServiceOutput(eOutputShipmentDetails, strIsRefresh);
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			
			if (ctx.getApiName().equals(
					KOHLSPCAApiNames.API_KOHLS_MODIFY_STORE_SHIPMENT)) {
				YRCPlatformUI.trace("The command name is "
						+ KOHLSPCAApiNames.API_KOHLS_MODIFY_STORE_SHIPMENT,
						null);

				Element eOutputShipmentDetails = ctx.getOutputXml()
						.getDocumentElement();

				try {
					if (!(YRCPlatformUI.isVoid(eOutputShipmentDetails))) {
						processGetShipmentDetailsServiceOutput(eOutputShipmentDetails, "");
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
			}

			//Drop2 - Reprint Label Functionality - Start
			if (ctx.getApiName().equals(
					KOHLSPCAApiNames.API_KOHLS_GET_SHIPMENT_CONTAINER_DETAILS_SERVICE)) {
				YRCPlatformUI.trace("The command name is "
						+ KOHLSPCAApiNames.API_KOHLS_GET_SHIPMENT_CONTAINER_DETAILS_SERVICE,
						null);

				Element eOutputShipmentContainerDetails = ctx.getOutputXml()
						.getDocumentElement();
				Document outputContainerDetailsXML = ctx.getOutputXml();

				try {
					if (!(YRCPlatformUI.isVoid(eOutputShipmentContainerDetails))) {
						callKOHLSInvokeProShippingWebService(outputContainerDetailsXML);
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			
			/*if (ctx.getApiName().equals(
					KOHLSPCAApiNames.API_GET_COMMON_CODE_LIST_PRINT_LABEL)) 
			{
					Element eleCommonCodeListOutput = ctx.getOutputXml().getDocumentElement();
					System.out.println(YRCXmlUtils.getString(ctx.getOutputXml()));
					Element eleCommonCode = YRCXmlUtils.getChildElement(eleCommonCodeListOutput, "CommonCode");
					String codeType = "";
					codeType = eleCommonCode.getAttribute("CodeType");
					if(codeType.equals("EXTN_LBL_PRT_FORMAT"))
					{
						strPrintLabelFormat = eleCommonCode.getAttribute("CodeLongDescription");
						System.out.println(strPrintLabelFormat);
					}
					Document reprintInputXML = addPrintLabelVal(outputContainerDetailsXML);
					System.out.println(YRCXmlUtils.getString(reprintInputXML));
					YRCApiContext context = new YRCApiContext();
					context.setApiName(KOHLSPCAApiNames.API_KOHLS_INVOKE_PROSHIPPING_WEB_SERVICE_REPRINT);
					context.setFormId(WIZARD_ID);
					context.setInputXml(reprintInputXML);
					callApi(context);

			}*/

			if (ctx.getApiName().equals(
					KOHLSPCAApiNames.API_KOHLS_INVOKE_PROSHIPPING_WEB_SERVICE_REPRINT)) {
				YRCPlatformUI.trace("The command name is "
						+ KOHLSPCAApiNames.API_KOHLS_INVOKE_PROSHIPPING_WEB_SERVICE_REPRINT,
						null);
				String strcltprngval=KOHLSSIMPropertiesPageBehavior.strCollatePrintingFlag;
				if(strcltprngval.isEmpty() && strcltprngval!=null)
				{
					strcltprngval=KohlsApplicationInitializer.strCollatePrintingFlag;
				}
				Document outputReprintLabelXML = ctx.getOutputXml();
				Element eOutputReprintLabelService = outputReprintLabelXML.getDocumentElement();
				Element eleOutput = YRCXmlUtils.getChildElement(eOutputReprintLabelService, "Error");
				
				if(YRCPlatformUI.isVoid(eleOutput)){
					String strlblLabelPrinter  = getFieldValue("cmbLabelPrinter");
					if(!"".equals(strlblLabelPrinter)){
						eOutputReprintLabelService.setAttribute(KOHLSPCAConstants.SELECTED_LABEL_PRINTER, strlblLabelPrinter);
					}
					
					String strProShipResponse = YRCXmlUtils.getString(eOutputReprintLabelService);
					Document inDocToLabelPrinter = YRCXmlUtils.createFromString(strProShipResponse);
					if(!YRCPlatformUI.isVoid(inDocToLabelPrinter)){
						KohlsLabelPrinter lblPrinter = new KohlsLabelPrinter();
						//Start changes for SFS June Release
						if(!strcltprngval.equalsIgnoreCase("Y"))
						{
							lblPrinter.printLabel(inDocToLabelPrinter);
						}
						else
						{
							callReprintforcollateaction(inDocToLabelPrinter);
						}
						//End changes for SFS June Release
					}
				}
				

				try {
					if(!YRCPlatformUI.isVoid(eleOutput))
					{
						handleErrorResponseFromProship(outputReprintLabelXML);
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			
			if (ctx.getApiName().equals(
					KOHLSPCAApiNames.API_KOHLS_ADD_CONTAINER_TO_SHIPMENT_SERVICE)) {
				YRCPlatformUI.trace("The command name is "
						+ KOHLSPCAApiNames.API_KOHLS_ADD_CONTAINER_TO_SHIPMENT_SERVICE,
						null);
				//Start changes for SFS June Release
				String strcltprngval="";
				
				strcltprngval=KOHLSSIMPropertiesPageBehavior.strCollatePrintingFlag;
				
				if(strcltprngval.isEmpty() && strcltprngval!=null)
				{
					strcltprngval=KohlsApplicationInitializer.strCollatePrintingFlag;
				}
				
				//String strcltprngval=KohlsApplicationInitializer.strCollatePrintingFlag;
				//End changes for SFS June Release
				Element eleOutputFromAddContainer = ctx.getOutputXml().getDocumentElement();
				Element eleInput = YRCXmlUtils.getChildElement(eleOutputFromAddContainer, KOHLSPCAConstants.INPUT_DOCUMENT);
				Element eleProShipOutput = YRCXmlUtils.getChildElement(eleOutputFromAddContainer, KOHLSPCAConstants.PROSHIP_DOCUMENT);
				
				Element eRemoveContainerOutputShipmentDetails = (Element)YRCXmlUtils.getChildren(eleInput).next();

				Element eProShipResponse = (Element)YRCXmlUtils.getChildren(eleProShipOutput).next();
				String strlblLabelPrinter  = getFieldValue("cmbLabelPrinter");
				if(!"".equals(strlblLabelPrinter)){
					eProShipResponse.setAttribute(KOHLSPCAConstants.SELECTED_LABEL_PRINTER, strlblLabelPrinter);
				}
				
				String strProShipResponse = YRCXmlUtils.getString(eProShipResponse);
				Document inDocToLabelPrinter = YRCXmlUtils.createFromString(strProShipResponse);
				if(!YRCPlatformUI.isVoid(inDocToLabelPrinter)){
					KohlsLabelPrinter lblPrinter = new KohlsLabelPrinter();
					try{
						//Start changes for SFS June Release
						// base64ShpLblStr=CollateUtil.getShippingLabelAsBase64Stirng(inDocToLabelPrinter);
						if(!strcltprngval.equalsIgnoreCase("Y"))
						{
							lblPrinter.printLabel(inDocToLabelPrinter);
						}
						// End changes for SFS June Release
					}catch(Exception ex){
						ex.printStackTrace();
					}
				}
				
				try {
					if (!(YRCPlatformUI.isVoid(eRemoveContainerOutputShipmentDetails))) {
						processGetShipmentDetailsServiceOutput(eRemoveContainerOutputShipmentDetails, "");
					}

					NodeList nOpenShipments = eRemoveContainerOutputShipmentDetails.getElementsByTagName(KOHLSPCAConstants.E_WORDLDSHIP_OPEN_SHIPMENT);
					
					if(!YRCPlatformUI.isVoid(nOpenShipments) && nOpenShipments.getLength() > 0){
					
					Element eleOpenShipmentsDoc=(Element) eRemoveContainerOutputShipmentDetails.getElementsByTagName(KOHLSPCAConstants.E_WORDLDSHIP_OPEN_SHIPMENT).item(0);
					
					
					if(!YRCPlatformUI.isVoid(eleOpenShipmentsDoc)){
						
						
						
						
						Document docOpenShipments=YRCXmlUtils.createDocument(KOHLSPCAConstants.E_WORDLDSHIP_DOC_TAG);
						
						docOpenShipments.getDocumentElement().setAttribute(KOHLSPCAConstants.A_XMLNS, KOHLSPCAConstants.V_XMLNS);
						
						Element eleOpenShipment = (Element) docOpenShipments.importNode(eleOpenShipmentsDoc, true);
						
						docOpenShipments.getDocumentElement().appendChild(eleOpenShipment);
						
						
						String strShipmentNo=eRemoveContainerOutputShipmentDetails.getAttribute(KOHLSPCAConstants.A_SHIPMENT_NO);
						String strShipNode=eRemoveContainerOutputShipmentDetails.getAttribute(KOHLSPCAConstants.A_SHIP_NODE);
						
						NodeList nlShipnode=eRemoveContainerOutputShipmentDetails.getElementsByTagName(KOHLSPCAConstants.E_SHIP_NODE);
						
						if(!YRCPlatformUI.isVoid(nlShipnode)){
							
							Element eleShipNode=(Element)nlShipnode.item(0);
							String strNodeType=eleShipNode.getAttribute(KOHLSPCAConstants.A_NODE_TYPE);
							String strShipmentType=eRemoveContainerOutputShipmentDetails.getAttribute(KOHLSPCAConstants.A_SHIPMENT_TYPE);
							
							if(strNodeType.equals(KOHLSPCAConstants.V_STORE) || strShipmentType.startsWith(KOHLSPCAConstants.V_MULTI_PREFIX) ){
								try
								{
									NodeList nlPrintPackDoc = eRemoveContainerOutputShipmentDetails.getElementsByTagName(KOHLSPCAConstants.E_PRINT_PACK_DOC);
									
									for (int intPrintPackCount = 0; intPrintPackCount < nlPrintPackDoc
									.getLength(); intPrintPackCount++) {
									
										Element elePrintPackDoc = (Element) nlPrintPackDoc.item(intPrintPackCount);
										
										if(!YRCPlatformUI.isVoid(elePrintPackDoc))
										{
											Element elePrintShipment = (Element) elePrintPackDoc.getElementsByTagName(KOHLSPCAConstants.E_SHIPMENT).item(0);
											if(!YRCPlatformUI.isVoid(elePrintShipment))
											{
												DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
										        Document inputPrintdoc = builder.newDocument();
										        Element eleImported = (Element) inputPrintdoc
												.importNode(elePrintShipment, true);
										        inputPrintdoc.appendChild(eleImported);
										        
										       // KOHLSPCAUtils.jasperRePrintPackSlip(inputPrintdoc,"Container", base64ShpLblStr);
										       
										        //Start changes for SFS June Release
										    
										        	
											
										        
										        if(strcltprngval.equalsIgnoreCase("Y"))
										        {
										        	Element printele = (Element)inputPrintdoc.importNode(eleProShipOutput, true);
										        	eleImported.appendChild(printele);
										        	
										        	KOHLSPrintOption kohlobj = new KOHLSPrintOption();
										        	
										        	inputPrintdoc.getDocumentElement().setAttribute("IsCollateReq", "Y");
										        	
										        	kohlobj.executemethod(inputPrintdoc,inDocToLabelPrinter);
										        }
												else
												{
													KOHLSPCAUtils.jasperRePrintPackSlip(inputPrintdoc,"Container");
												}
										        
										        
										        //End changes for SFS June Release
										        
										        // add message here
										        if(areItemsLeftForPacking()){
										        	YRCPlatformUI.setMessage(YRCPlatformUI.getFormattedString(YRCPlatformUI.getString("INFO_ADD_CONTAINER_PRINT"),
															new String[]{getLatestContainerNo(),getDefaultPrinterID()}) + "\n" + YRCPlatformUI.getString("QTY_LEFT_TO_BE_PACKED"));
										        }else{
												YRCPlatformUI.setMessage(YRCPlatformUI.getFormattedString(YRCPlatformUI.getString("INFO_ADD_CONTAINER_PRINT"),
														new String[]{getLatestContainerNo(),getDefaultPrinterID()}));
										        }
											}
										}
									}
								}catch (Exception ex)
								{
									YRCPlatformUI.trace( "Got the following Error While Printing Report" +  KOHLSPCAUtils.getStringTrace(ex));
									// add message here
									if(areItemsLeftForPacking()){
										YRCPlatformUI.setMessage(YRCPlatformUI.getFormattedString(YRCPlatformUI.getString("INFO_ADD_CONTAINER_ERROR_PRINT"),
												new String[]{getLatestContainerNo(),getDefaultPrinterID()}) + "\n" + YRCPlatformUI.getString("QTY_LEFT_TO_BE_PACKED"));
									}else{
									YRCPlatformUI.setMessage(YRCPlatformUI.getFormattedString(YRCPlatformUI.getString("INFO_ADD_CONTAINER_ERROR_PRINT"),
											new String[]{getLatestContainerNo(),getDefaultPrinterID()}));
									}
								}
							} else{
								// add message here
								if(areItemsLeftForPacking()){
									YRCPlatformUI.setMessage(YRCPlatformUI.getString("INFO_CLOSE_CONTAINER_SUCCESS") + "\n" + YRCPlatformUI.getString("QTY_LEFT_TO_BE_PACKED"));
								}else{
								YRCPlatformUI.setMessage(YRCPlatformUI.getString("INFO_CLOSE_CONTAINER_SUCCESS"));
								}

							}

						}
					
						
						
						
						if(!YRCPlatformUI.isVoid(getLatestContainerNo())){
							
							String strFileName=strShipmentNo+"_"+strShipNode+"_"+getLatestContainerNo()+".xml";
							
							// Removing WworldShip interactions in the code
							//KOHLSXMLFileWriter.writeXmlFile(docOpenShipments, strFileName);
							
							
						}
		
						
					}
					
					
					
					}
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				refreshScreenAfterVoidOrClose();
			}
				//<!-- Start - Drop2 changes -->
				else if(KOHLSPCAApiNames.API_KOHLS_INVOKE_PROSHIPPING_WEB_SERVICE_VOID.equals(ctx.getApiName())){
					
					Document outputVoidLabelXML = ctx.getOutputXml();
					Element eOutputVoidLabelService = ctx.getOutputXml().getDocumentElement();
					Element eleOutput = YRCXmlUtils.getChildElement(eOutputVoidLabelService, "Errors");

					if(!YRCPlatformUI.isVoid(eleOutput))
					{
						handleErrorResponseFromProship(outputVoidLabelXML);
					}
					else {
						String strVoidResponse = YRCXmlUtils.getAttribute(eOutputVoidLabelService, "ExtnResponse");						
						if(isSuccess(strVoidResponse)){
							Element eleInputXml = ctx.getInputXml().getDocumentElement();
							String strShipmentContainerKey = eleInputXml.getAttribute("ShipmentContainerKey"); 
							String strShipmentKey = eleInputXml.getAttribute("ShipmentKey");
							String strContainerScm = eleInputXml.getAttribute("ContainerScm");
							unpackShipment(strShipmentContainerKey, strShipmentKey, strContainerScm);
						}
						else{
							YRCPlatformUI.showInformation("ProShip Error", "Void Label failed with Error Code\t" + strVoidResponse);
						}
					}
					
				}
				
				/*else if(KOHLSPCAApiNames.API_KOHLS_INVOKE_PROSHIPPING_WEB_SERVICE_CLOSE.equals(ctx.getApiName())){
				
					Element eleOutputXml = ctx.getOutputXml().getDocumentElement();
					Element eleContainers = YRCXmlUtils.getChildElement(eleOutputXml, "Containers");
					Element eleContainer = YRCXmlUtils.getChildElement(eleContainers, "Container");
					String strTrackingNo = eleContainer.getAttribute(KOHLSPCAConstants.A_TRACKING_NO);
					String strShipmentContainerKey = eleContainer.getAttribute(KOHLSPCAConstants.A_SHIPMENT_CONTAINER_KEY);
					Document indoC = YRCXmlUtils.createDocument("Container");
					Element eleInput = indoC.getDocumentElement();
					eleInput.setAttribute(KOHLSPCAConstants.A_SHIPMENT_CONTAINER_KEY, strShipmentContainerKey);
					eleInput.setAttribute(KOHLSPCAConstants.A_TRACKING_NO, strTrackingNo);
					updateContainerTrackingNoForClose(indoC);
					closeContainer();
					
				}*/
			else if(KOHLSPCAApiNames.API_KOHLS_GET_CONTAINER_DETAILS_FOR_VOID_CONTAINER.equals(ctx.getApiName())){
				
				Document outDoc = ctx.getOutputXml();
				callProShipForVoidContainer(outDoc);
			}else 	if (ctx.getApiName().equals(
					KOHLSPCAApiNames.API_GET_COMMON_CODE_LIST_TARE_APPLY)) {
				if (ctx.getInvokeAPIStatus() > 0) {
					Element eleCommonCodeListOutput = ctx.getOutputXml().getDocumentElement();
					Element eleCommonCode = YRCXmlUtils.getChildElement(eleCommonCodeListOutput, "CommonCode");
					String strTAREWeight = eleCommonCode.getAttribute("CodeShortDescription");
					
					if("Y".equals(strTAREWeight)){
						Element eleShipmentDetails = getModel("getShipmentDetailsForPackShipment");
						String strEnterpriseCode = eleShipmentDetails.getAttribute("EnterpriseCode");
						Document inDoc = YRCXmlUtils.createDocument("CommonCode");
						Element eleInput = inDoc.getDocumentElement();
						eleInput.setAttribute("OrganizationCode", strEnterpriseCode);
						eleInput.setAttribute("CodeType", YRCPlatformUI.getString("ENT_TARE_WEIGHT_VL"));
						callApi(KOHLSPCAApiNames.API_GET_COMMON_CODE_LIST_TARE_VALUE, inDoc);
					} else if("N".equals(strTAREWeight)){
						closeContainer();
					}
				}
			}else 	if (ctx.getApiName().equals(
					KOHLSPCAApiNames.API_GET_COMMON_CODE_LIST_TARE_VALUE)) {
				if (ctx.getInvokeAPIStatus() > 0) {
					Element eleCommonCodeListOutput = ctx.getOutputXml().getDocumentElement();
					Element eleCommonCode = YRCXmlUtils.getChildElement(eleCommonCodeListOutput, "CommonCode");
					String strTAREWeight = eleCommonCode.getAttribute("CodeShortDescription");
					Double dblTAREWeight = Double.parseDouble(strTAREWeight);
					updateActualWeight(dblTAREWeight);
				}
			}
			else if(ctx.getApiName().equals(KOHLSPCAApiNames.KOHLS_UNPACK_SHIPMENT_SERVICE)){
				refreshScreenAfterVoidOrClose();
			}
			
			//<!-- End - Drop2 changes -->
		}
	}

	private boolean areItemsLeftForPacking() {
		// TODO Auto-generated method stub
		Element elePackShipmentDetails = getModel("getShipmentDetailsForPackShipment");
		Element eleShipmentLines = YRCXmlUtils.getChildElement(elePackShipmentDetails, KOHLSPCAConstants.E_SHIPMENT_LINES);
		if(!YRCPlatformUI.isVoid(eleShipmentLines)){
			ArrayList<Element> arrShipLine = YRCXmlUtils.getChildren(eleShipmentLines, KOHLSPCAConstants.E_SHIPMENT_LINE);
			int iShipmentLineLength = arrShipLine.size();
			for(int i=0; i<iShipmentLineLength; i++){
				Element eleShipmentLine = arrShipLine.get(i);
				String strQuantityToPack = YRCXmlUtils.getAttribute(eleShipmentLine, KOHLSPCAConstants.A_QUANTITY_TO_PACK);
				Double dblQtyToPack = Double.parseDouble(strQuantityToPack);
				if(dblQtyToPack > 0.0){
					return true;
				}
			}
		}
		return false;
	}

	private boolean isFromScale() {
		
		Element eleProperties = KohlsApplicationInitializer.eleVerifyTerminalProperties;
		Element elePropertiesList = YRCXmlUtils.getChildElement(eleProperties, "SIMINIProperties");
		String strWeighScale = elePropertiesList.getAttribute("WeightCaculator");
		
		if("Use Scale for Container Weight".equals(strWeighScale)){
			return true;
		}
		return false;
	}

	//<!-- Start - Drop2 changes -->
	public void launchReasonCodePopup() {
		// TODO Auto-generated method stub		
		
		KOHLSRecordShortagePopup composite = new KOHLSRecordShortagePopup(parent, SWT.NONE);
		YRCDialog dialog = new YRCDialog(composite, 460, 150, YRCPlatformUI.getString("RECORD_SHORTAGE"), "");
		dialog.open();
	}
	//<!-- End - Drop2 changes -->
	
	//<!-- Start - Drop2 changes -->

	private void unpackShipment(String strShipmentContainerKey, String strShipmentKey, String strContainerScm) {
		// TODO Auto-generated method stub
		
		Element eleContainerToRemove=getModel("CurrentContainerSource");
		Document docInputToRemoveContainer = getInputDocToRemoveContainer(eleContainerToRemove);
		Element eleInputContainersToRemove = YRCXmlUtils.getChildElement(docInputToRemoveContainer.getDocumentElement(), KOHLSPCAConstants.E_CONTAINERS);
		Element eleInputContainerToRemove = YRCXmlUtils.getChildElement(eleInputContainersToRemove, KOHLSPCAConstants.E_CONTAINER);
		Element eleInputContainerDetails = YRCXmlUtils.getChildElement(eleInputContainerToRemove, KOHLSPCAConstants.E_CONTAINER_DETAILS);
		
		Document inDoc = YRCXmlUtils.createDocument(KOHLSPCAConstants.E_SHIPMENT);
		Element eleInputXml = inDoc.getDocumentElement();
		eleInputXml.setAttribute(KOHLSPCAConstants.A_SHIPMENT_KEY, strShipmentKey);
		
		Element eleContainers = YRCXmlUtils.createChild(eleInputXml, KOHLSPCAConstants.E_CONTAINERS);
		Element eleContainer = YRCXmlUtils.createChild(eleContainers, KOHLSPCAConstants.E_CONTAINER);
		YRCXmlUtils.importElement(eleContainer, eleInputContainerDetails);
		eleContainer.setAttribute(KOHLSPCAConstants.A_SHIPMENT_CONTAINER_KEY, strShipmentContainerKey);
		eleContainer.setAttribute(KOHLSPCAConstants.A_CONTAINER_SCM, strContainerScm);
		
		callApi(KOHLSPCAApiNames.KOHLS_UNPACK_SHIPMENT_SERVICE, inDoc);
	}

	private void callProShipForVoidContainer(Document inDoc) {
		// TODO Auto-generated method stub

		callApi(KOHLSPCAApiNames.API_KOHLS_INVOKE_PROSHIPPING_WEB_SERVICE_VOID, inDoc);
		
	}

	/*private void updateContainerTrackingNoForClose(Document indoC) {
		// TODO Auto-generated method stub
		callApi(KOHLSPCAApiNames.API_KOHLS_CHANGE_SHIPMENT_CONTAINER_FOR_CLOSE_CONTAINER, indoC);
	}*/

	public void updateActualWeight(Double dblTAREWeight) {
		// TODO Auto-generated method stub
		Element currentContainerSource = getModel("CurrentContainerSource");
		String strNetWeight = currentContainerSource.getAttribute(KOHLSPCAConstants.A_CONTAINER_NET_WT);
		Double dblNetWeight = Double.parseDouble(strNetWeight);
		Double dblActualWeight = dblTAREWeight + dblNetWeight;
		currentContainerSource.setAttribute(KOHLSPCAConstants.A_ACTUAL_WEIGHT, Double.toString(dblActualWeight));
	//	callProShipForCloseContainer(createInputForProShip());
		closeContainer();
	}
//<!-- End - Drop2 changes -->

	private String getDefaultPrinterID() {
		 String strPrinterID="";
		  /*
		   * Pawan - Start - Drop2 - DefaultPrinter will be read from the KohlsApplicationInitializer
		   * instead of the sop.ini file
		   */
		  /*if(!YRCPlatformUI.isVoid(System.getProperty(KOHLSPCAConstants.INI_PROPERTY_PRINTER_ID))){
			  strPrinterID=System.getProperty(KOHLSPCAConstants.INI_PROPERTY_PRINTER_ID);
			  
		  }*/
		   strPrinterID = KohlsApplicationInitializer.getTerminalPropertyForUISession(KOHLSPCAConstants.INI_PROPERTY_DEFAULT_LABEL_PRINTER);
		  /*Pawan - End - Drop2*/
		  
		  return strPrinterID;
	}
	
   private void setDefaultPrinterID(String strPrinterID){
	   
	   this.strPrinterID=strPrinterID;
	   
   }
   
   private String getPrinterID() {
	   
	   return strPrinterID;
	
  }

	private void processGetShipmentDetailsServiceOutput(
			Element eOutputShipmentDetails, String isRefresh) {

		Element eOutputContainerTypeList = YRCXmlUtils.getChildElement(
				eOutputShipmentDetails, KOHLSPCAConstants.E_ITEM_LIST);

		setModel("getShipmentDetailsForPackShipment", eOutputShipmentDetails);

		Element eShipmentLines = YRCXmlUtils.getChildElement(
				eOutputShipmentDetails, KOHLSPCAConstants.A_SHIPMENT_LINES);

		if (YRCPlatformUI.isVoid(eShipmentLines)) {
			setFieldValue("txtScanShipmentNo", "");
			addFieldInError("txtScanShipmentNo", YRCPlatformUI
					.getString("MSG_NO_SHIPMENT_RECORD_FOUND"));

			getControl("txtScanShipmentNo").setFocus();

			if (!YRCPlatformUI.isVoid(getModel("getShipmentLineList_Output"))) {
				setModel("getShipmentLineList_Output", YRCXmlUtils
						.createDocument(KOHLSPCAConstants.E_SHIPMENT_LINES)
						.getDocumentElement());
				repopulateModel("getShipmentLineList_Output");
				setModel("getItemListForContainerType_Output", YRCXmlUtils
						.createDocument(KOHLSPCAConstants.E_ITEM_LIST)
						.getDocumentElement());
				repopulateModel("getItemListForContainerType_Output");
				setModel("Containers", YRCXmlUtils.createDocument(
						KOHLSPCAConstants.E_CONTAINERS).getDocumentElement());
				repopulateModel("Containers");
				setModel("CurrentContainerSource", YRCXmlUtils.createDocument(
						KOHLSPCAConstants.E_CONTAINER).getDocumentElement());
				repopulateModel("CurrentContainerSource");

			}

		} else {

			/*START
			Logic for enabling removeContainer and CloseContainer buttons depending on Shipment Status.
			CASE 1-
			if Shipment status not as mentioned in below cases disable both buttons and their hotkeys
			CASE 2-
			if Shipment is Shipment Packed (Status = 1300) disable only Close button and its hotkey
			CASE 3-
			if Shipment is Shipment Pack in Progress (Status = 1100.04) or Shipment Pick List Printed (Status = 1100.03)
			 enable both buttons and their hotkeys		
			
		*/
		
			
			String strShipmentStatus = eOutputShipmentDetails
					.getAttribute(KOHLSPCAConstants.A_STATUS);
			

			if (!YRCPlatformUI
					.equals(
							strShipmentStatus,
							KOHLSPCAConstants.STATUS_SHIPMENT_PICK_LIST_PRINTED) && 
				!YRCPlatformUI
					.equals(
							strShipmentStatus,
							KOHLSPCAConstants.STATUS_SHIPMENT_PACK_IN_PROGRESS) &&
				!YRCPlatformUI
							.equals(
									strShipmentStatus,
									KOHLSPCAConstants.STATUS_SHIPMENT_PACKED)
							) {

		
		if(!"Y".equals(isRefresh))
		YRCPlatformUI
				.showInformation(
						YRCPlatformUI.getString("INFO"),
						YRCPlatformUI
								.getString("INFO_ONLY_VIEW_SHIPPED_CANCELLED_LINES"));

		disableField("btnCloseContainer");
		disableField("packContainerComposite");
		disableField("btnRemoveContainer");
		disableField("btnReprintLabel");
		

		YRCPlatformUI.enableAction(
				KOHLSPackShipmentContainerCloseAction.ACTION_ID, false);
		YRCPlatformUI
				.enableAction(
						KOHLSPackShipmentContainerRemoveAction.ACTION_ID,
						false);
		YRCPlatformUI.enableAction(KOHLSPackShipmentContainerReprintLabelAction.ACTION_ID, false);
		
		if(YRCPlatformUI.equals(strShipmentStatus, KOHLSPCAConstants.STATUS_SHIPMENT_SHIPPED)){
			enableField("btnReprintLabel");
			YRCPlatformUI.enableAction(KOHLSPackShipmentContainerReprintLabelAction.ACTION_ID, true);
		}
		
		
		getControl("txtScanShipmentNo").setFocus();

		boolgetFocus = true;
	
			} else {
		
		if (YRCPlatformUI.equals(strShipmentStatus,
				KOHLSPCAConstants.STATUS_SHIPMENT_PACKED)) {
			
			disableField("btnCloseContainer");
			disableField("packContainerComposite");
			/*30 min void container fix start*/
			//disableField("btnRemoveContainer");
			/*30 min void container fix end*/
			enableField("btnReprintLabel");
			
			YRCPlatformUI.enableAction(
					KOHLSPackShipmentContainerCloseAction.ACTION_ID, false);
			YRCPlatformUI.enableAction(
					KOHLSPackShipmentContainerRemoveAction.ACTION_ID, true);
			YRCPlatformUI.enableAction(KOHLSPackShipmentContainerReprintLabelAction.ACTION_ID, true);
			boolgetFocus = true;
			getControl("txtScanShipmentNo").setFocus();

		}else {
			 //enable all buttons and actions
			
			enableField("btnCloseContainer");
			enableField("packContainerComposite");
			enableField("btnRemoveContainer");
			enableField("btnReprintLabel");
			
			YRCPlatformUI.enableAction(
					KOHLSPackShipmentContainerCloseAction.ACTION_ID, true);
			YRCPlatformUI.enableAction(
					KOHLSPackShipmentContainerRemoveAction.ACTION_ID, true);		
			YRCPlatformUI.enableAction(KOHLSPackShipmentContainerReprintLabelAction.ACTION_ID, true);
			
			boolgetFocus = false;
		}
			}	
			
			// setModel for populate container table

			setModel("CurrentContainerSource", YRCXmlUtils.createDocument(
					KOHLSPCAConstants.E_CONTAINER).getDocumentElement());
			
			
			setModel("OriginalCurrentContainerSource", YRCXmlUtils.createDocument(
					KOHLSPCAConstants.E_CONTAINER).getDocumentElement());
		

			// setModel for ItemList table
			NodeList nShipmentLineList = eShipmentLines
					.getElementsByTagName("ShipmentLine");

			// calculate the Placed Quantity and Quantity to be
			// Packed

			calculateQtyToBePacked(nShipmentLineList);

			// setmodel for getShipmentLineList_Output

			setModel("getShipmentLineList_Output", eShipmentLines);

			String strContainerNo = eOutputShipmentDetails
					.getAttribute(KOHLSPCAConstants.A_CONTAINER_NO);

			if (nShipmentLineList.getLength() == 1) {

				if(!"Y".equals(isRefresh))
				YRCPlatformUI.setMessage(YRCPlatformUI
						.getString("MSG_SHIPMENT_FOUND"));
				
				

				if (!YRCPlatformUI.isVoid(strContainerNo)) {

					Element eSingleShipmentLine = (Element) nShipmentLineList
							.item(0);

					Double dShipmentLineQty = YRCXmlUtils.getDoubleAttribute(
							eSingleShipmentLine, KOHLSPCAConstants.A_QUANTITY);

					if (dShipmentLineQty == 1.00) {

						defaultSingleContainerType(eOutputContainerTypeList,
								eShipmentLines);

						if (!boolgetFocus)
							getControl("txtItemID").setFocus();

					}

				}

			} else {
				if(!"Y".equals(isRefresh))
				YRCPlatformUI.setMessage(YRCPlatformUI
						.getString("MSG_MULTIPLE_SHIPMENT_LINES_FOUND"));

				defaultMultiContainerType(eOutputContainerTypeList,
						KOHLSPCAUtils.getDefaultMultiContainerTypeID());

				if (!boolgetFocus)
					getControl("cmbContainerType").setFocus();

			}

			// setModel for ContainerType

			try {
				if (!(YRCPlatformUI.isVoid(eOutputContainerTypeList))) {
					
					setModel("getItemListForContainerType_Output",
							eOutputContainerTypeList);

				}
			} catch (Exception e) {
				e.printStackTrace();
			}

			// setModel for Containers Combo and Container Table
			Element eOutputContainers = YRCXmlUtils.getChildElement(
					eOutputShipmentDetails, KOHLSPCAConstants.E_CONTAINERS);
			if (!YRCPlatformUI.isVoid(eOutputContainers)) {

				// START
				// Show newly generated Container first

				defaultContainerNo(eOutputContainers, strContainerNo);

				// END

				setModel("Containers", eOutputContainers);
				setFieldValue("txtContainerNo",
						getFieldValue("cmbCtnDetailsNo"));
				updateContainerDetailsTable(getFieldValue("cmbCtnDetailsNo"));

			}
			// clear ScanShipment field
			
			setFieldValue("txtScanShipmentNo", "");
			
			// Disable Remove container once shipment moves to Shipment Shipped Status
			if(YRCPlatformUI.equals(strShipmentStatus, KOHLSPCAConstants.STATUS_SHIPMENT_SHIPPED)){
				disableField("btnRemoveContainer");
			}
			
			//<!-- Start - Drop2 changes -->
			//setContainerUnitWt();
			//<!-- End - Drop2 changes -->
		}

	}
	



	

	private void defaultContainerNo(Element outputContainers,
			String strContainerNo) {

		NodeList nOutputContainersList = outputContainers
				.getElementsByTagName(KOHLSPCAConstants.E_CONTAINER);

		if (!YRCPlatformUI.isVoid(nOutputContainersList)
				&& nOutputContainersList.getLength() > 1) {

			rearrangeContainerNo(outputContainers, strContainerNo);

		}

	}

	private void rearrangeContainerNo(Element outputContainers,
			String strContainerNo) {

		Element eContainer = (Element) YRCXPathUtils.evaluate(outputContainers,
				"/Shipment/Containers/Container[@ContainerNo='"
						+ strContainerNo + "']", XPathConstants.NODE);

		if (!YRCPlatformUI.isVoid(eContainer)) {

			// This code to show the New Container Number for auto generated
			// container
			// Walk backwards until we find the first sibling in the parent
			//
			Node previousNode = eContainer.getPreviousSibling();
			while (previousNode.getPreviousSibling() != null
					&& !(previousNode == eContainer)) {
				previousNode = previousNode.getPreviousSibling();
			}
			if (previousNode.getPreviousSibling() == null) {
				try {

					if (!previousNode.isSameNode(eContainer)) {
						eContainer = (Element) outputContainers
								.removeChild(eContainer);
						outputContainers.insertBefore(eContainer, previousNode);
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
			}

		} else {
			
			if(YRCPlatformUI.equals(strContainerNo, "")){				
				
			YRCPlatformUI.setMessage(YRCPlatformUI.getString("INFO_SHIPMENT_PACK_COMPLETE"));
			}
		}

	}

	private void defaultMultiContainerType(Element outputContainerTypeList,
			String mutliDefaultContainer) {

		NodeList nContainerTypeList = outputContainerTypeList
				.getElementsByTagName(KOHLSPCAConstants.E_ITEM);

		if (!YRCPlatformUI.isVoid(outputContainerTypeList)
				&& nContainerTypeList.getLength() > 1) {

			rearrangeContainerType(outputContainerTypeList,
					mutliDefaultContainer);

		}

	}



	private void defaultSingleContainerType(Element eContainerTypeList,
			Element eShipmentLines) {

		NodeList nContainerTypeList = eContainerTypeList
				.getElementsByTagName(KOHLSPCAConstants.E_ITEM);

		if (!YRCPlatformUI.isVoid(nContainerTypeList)
				&& nContainerTypeList.getLength() > 1) {
			if (!YRCPlatformUI.isVoid(eShipmentLines)) {

				String strContainerTypeID = (String) YRCXPathUtils
						.evaluate(
								eShipmentLines,
								"/Shipment/ShipmentLines/ShipmentLine/OrderLine/ItemDetails/Extn/@ExtnDefaultContainerType",
								XPathConstants.STRING);
				rearrangeContainerType(eContainerTypeList, strContainerTypeID);
				setIsSingleShipment(true);
				setSingleShipmentContainerTypeID(strContainerTypeID);
			}
		}

	}

	private void setSingleShipmentContainerTypeID(String strContainerTypeID) {
		
		singleShipmentContainerTypeID=strContainerTypeID;
		
		
	}
	
    private String getSingleShipmentContainerTypeID() {
		
		return singleShipmentContainerTypeID;
		
		
	}

	private void setIsSingleShipment(boolean b) {
		isSingleShipment=b;
		
	}
	
	  private boolean getIsSingleShipment(){
			
			return isSingleShipment;
			
			
		}

	private void rearrangeContainerType(Element eContainerTypeList,
			String strContainerTypeID) {

		Element eContainerType = (Element) YRCXPathUtils.evaluate(
				eContainerTypeList, "/Shipment/ItemList/Item[@ItemID='"
						+ strContainerTypeID + "']", XPathConstants.NODE);
		
		if (!YRCPlatformUI.isVoid(eContainerType)) {
			
			// This code to show the Default Container Type for Item
			// Walk backwards until we find the first sibling in the parent
			//
			Node previousNode = eContainerType.getPreviousSibling();
			while (previousNode !=null && previousNode.getPreviousSibling() != null
					&& !(previousNode == eContainerType)) {
				previousNode = previousNode.getPreviousSibling();
			}
			if (previousNode !=null && previousNode.getPreviousSibling() == null) {
				try {

					if (!previousNode.isSameNode(eContainerType)) {
						eContainerType = (Element) eContainerTypeList
								.removeChild(eContainerType);
						eContainerTypeList.insertBefore(eContainerType,
								previousNode);
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
			}

		} else {
			/*YRCPlatformUI
					.showInformation(
							YRCPlatformUI.getString("INFO"),
							YRCPlatformUI
									.getString("INFO_DEFAULT_CONTAINER_NOT_FOUND"));*/
		}
		
		
		
	}

	
	
	public void setContainerUnitWt() {
		//		 check for non-blank values for Container Wt and Container UOM
		
		Element eCurrentContainer = getTargetModel("CurrentContainer");
		
		String strNewContainerType=eCurrentContainer.getAttribute(KOHLSPCAConstants.A_CONTAINER_TYPE);
		
		Element currentContainerSource = getModel("CurrentContainerSource");
		
		String strContainerNetWt=currentContainerSource.getAttribute(KOHLSPCAConstants.A_CONTAINER_NET_WT);
		
		String strCurrentContainerType=currentContainerSource.getAttribute(KOHLSPCAConstants.A_CONTAINER_TYPE);
		
		if(YRCPlatformUI.equals(currentContainerSource.getAttribute(KOHLSPCAConstants.A_IS_NEW_CONTAINER), KOHLSPCAConstants.FLAG_Y) && 
				YRCPlatformUI.isVoid(strContainerNetWt)){
			
			
			Element eContainerType = getModel("getItemListForContainerType_Output");

			Element eleCNTTypeItemPrimeInfo = (Element) YRCXPathUtils
					.evaluate(eContainerType,
							"/Shipment/ItemList/Item[@ItemID='"
									+ strNewContainerType
									+ "']/PrimaryInformation",
							XPathConstants.NODE);
			
			currentContainerSource.setAttribute(
					KOHLSPCAConstants.A_CONTAINER_NET_WT,
					eleCNTTypeItemPrimeInfo.getAttribute(KOHLSPCAConstants.A_UNIT_WEIGHT));

			currentContainerSource.setAttribute(
					KOHLSPCAConstants.A_ACTUAL_WEIGHT,
					eleCNTTypeItemPrimeInfo.getAttribute(KOHLSPCAConstants.A_UNIT_WEIGHT));
			
			currentContainerSource.setAttribute(
					KOHLSPCAConstants.A_CONTAINER_NET_UOM,
					eleCNTTypeItemPrimeInfo.getAttribute(KOHLSPCAConstants.A_UNIT_WEIGHT_UOM));
			
		}
		
		if(YRCPlatformUI.equals(currentContainerSource.getAttribute(KOHLSPCAConstants.A_IS_NEW_CONTAINER), KOHLSPCAConstants.FLAG_Y) && 
				!YRCPlatformUI.equals(strContainerNetWt,"")){
			
			Element eContainerType = getModel("getItemListForContainerType_Output");

			Element eleCNTTypeItemPrimeInfo = (Element) YRCXPathUtils
					.evaluate(eContainerType,
							"/Shipment/ItemList/Item[@ItemID='"
									+ strNewContainerType
									+ "']/PrimaryInformation",
							XPathConstants.NODE);
			
			double dNewContainerUnitWt=YRCXmlUtils.getDoubleAttribute(eleCNTTypeItemPrimeInfo,KOHLSPCAConstants.A_UNIT_WEIGHT);
			
			double dOrginalContainerUnitWt=YRCXmlUtils.getDoubleAttribute(currentContainerSource,KOHLSPCAConstants.A_ACTUAL_WEIGHT);
			
			double dOrginalContainerNetWt=YRCXmlUtils.getDoubleAttribute(currentContainerSource,KOHLSPCAConstants.A_CONTAINER_NET_WT);
			
			dOrginalContainerNetWt=dOrginalContainerNetWt+dNewContainerUnitWt-dOrginalContainerUnitWt;
			
			currentContainerSource.setAttribute(KOHLSPCAConstants.A_CONTAINER_NET_WT, Double.toString(dOrginalContainerNetWt));
			
			currentContainerSource.setAttribute(KOHLSPCAConstants.A_ACTUAL_WEIGHT, Double.toString(dNewContainerUnitWt));
			
			currentContainerSource.setAttribute(KOHLSPCAConstants.A_CONTAINER_NET_UOM, eleCNTTypeItemPrimeInfo.getAttribute(KOHLSPCAConstants.A_UNIT_WEIGHT_UOM) );
		}
			
		repopulateModel("CurrentContainerSource");

	}


	private void handleScannedItem(int intProcessScannedItemResult) {

		switch (intProcessScannedItemResult) {

		case STATUS_VALID_ITEM_TO_PACK:

			addItemToCurrentContainerModel(getModel("NewlyScannedShipmentItem"));
			repopulateModel("getShipmentLineList_Output");
			removeFieldInError("txtItemID");
			break;

		case STATUS_VALID_ITEM_ALREADY_PACKED:

			addFieldInError("txtItemID", YRCPlatformUI
					.getString("MSG_VALID_ITEM_ALREADY_PACKED"));
			break;

		case STATUS_VALID_ITEM_NOT_IN_SHIPMENT:

			addFieldInError("txtItemID", YRCPlatformUI
					.getString("MSG_VALID_ITEM_NOT_IN_SHIPMENT"));
			break;

		case STATUS_INVALID_ITEM:

			addFieldInError("txtItemID", YRCPlatformUI
					.getString("MSG_NO_VALID_ITEM_FOUND"));
			break;
			
		case STATUS_VALID_CONTAINER_ITEM_SCANNED:
			
			YRCPlatformUI.setMessage("MSG_CONTAINER_TYPE_IS_SELECTED");
			break;
			

		default:
			setFieldValue("txtItemID", "");
			getControl("txtItemID").setFocus();
		}

	}

	private void addItemToCurrentContainerModel(Element eScannedItemModel) {
		
             YRCPlatformUI.setMessage(YRCPlatformUI.getString("MSG_ITEM_ADDED_TO_CONTAINER"));
		

		// Write logic to add item to new container or existing container

		if (!YRCPlatformUI.isVoid(eScannedItemModel)) {
			
			Element eAddNewItemToContainerDetails = null;
			
			boolean doImport=false;

			Element eCurrentContainerSource = getModel("CurrentContainerSource");
			
			Element eCurrentContainerTypeModel=getTargetModel("CurrentContainer");
			

			String strContainerNo = getFieldValue("cmbCtnDetailsNo");

			eCurrentContainerSource.setAttribute(
					KOHLSPCAConstants.A_CONTAINER_NO, strContainerNo);
			
			eCurrentContainerSource.setAttribute(
					KOHLSPCAConstants.A_CONTAINER_TYPE, eCurrentContainerTypeModel.getAttribute(KOHLSPCAConstants.A_CONTAINER_TYPE));

			String strItemToAdd = eScannedItemModel
					.getAttribute(KOHLSPCAConstants.A_ITEM_ID);
			String strShipmentLineKey=eScannedItemModel
			.getAttribute(KOHLSPCAConstants.A_SHIPMENT_LINE_KEY);

			Element eExistingContainerDetail = (Element) YRCXPathUtils
					.evaluate(eCurrentContainerSource,
							"//Container/ContainerDetails/ContainerDetail[@ItemID='"
									+ strItemToAdd + "'and @ShipmentLineKey='"+strShipmentLineKey+"']", XPathConstants.NODE);
			
			
			
			Document docContainers=YRCXmlUtils.createDocument(KOHLSPCAConstants.E_CONTAINERS);
			
			Element eleContainers = (Element) docContainers.importNode(eCurrentContainerSource, true);
			
			docContainers.getDocumentElement().appendChild(eleContainers);
			
			NodeList nlContainerDetails=eCurrentContainerSource.getElementsByTagName(KOHLSPCAConstants.E_CONTAINER_DETAILS);
			
			
			
			if (!YRCPlatformUI.isVoid(nlContainerDetails)
					&& nlContainerDetails.getLength() > 0) {
				
				eAddNewItemToContainerDetails = (Element) nlContainerDetails
						.item(0);
				

			} else {
				eAddNewItemToContainerDetails = eCurrentContainerSource
						.getOwnerDocument().createElement(
								KOHLSPCAConstants.E_CONTAINER_DETAILS);
				doImport=true;
				
			}
			
			
			Element eleContainerDetail = (Element) YRCXPathUtils
			.evaluate(eleContainers,
					"/Containers/Container/ContainerDetails/ContainerDetail[@ItemID='"
							+ strItemToAdd + "'and @ShipmentLineKey='"+strShipmentLineKey+"']", XPathConstants.NODE);

			updateContainerNetWeight(eCurrentContainerSource, eScannedItemModel);

			if (!YRCPlatformUI.isVoid(eleContainerDetail)) {

				Double dPlacedQty = YRCXmlUtils.getDoubleAttribute(
						eExistingContainerDetail, KOHLSPCAConstants.A_QUANTITY);
				dPlacedQty++;
				eExistingContainerDetail.setAttribute(
						KOHLSPCAConstants.A_QUANTITY, Double
								.toString(dPlacedQty));

			} else {

				
				Element eAddNewItemToContainerDetail = YRCXmlUtils.createChild(
						eAddNewItemToContainerDetails,
						KOHLSPCAConstants.E_CONTAINER_DETAIL);
				eAddNewItemToContainerDetail.setAttribute(
						KOHLSPCAConstants.A_ITEM_ID, eScannedItemModel
								.getAttribute(KOHLSPCAConstants.A_ITEM_ID));
				eAddNewItemToContainerDetail
						.setAttribute(
								KOHLSPCAConstants.A_PRODUCT_CLASS,
								eScannedItemModel
										.getAttribute(KOHLSPCAConstants.A_PRODUCT_CLASS));
				eAddNewItemToContainerDetail.setAttribute(
						KOHLSPCAConstants.A_QUANTITY,
						KOHLSPCAConstants.V_INT_ONE);
				eAddNewItemToContainerDetail.setAttribute(
						KOHLSPCAConstants.A_UOM, eScannedItemModel
								.getAttribute(KOHLSPCAConstants.A_UOM));
				eAddNewItemToContainerDetail
						.setAttribute(
								KOHLSPCAConstants.A_SHIPMENT_KEY,
								eScannedItemModel
										.getAttribute(KOHLSPCAConstants.A_SHIPMENT_KEY));
				eAddNewItemToContainerDetail
						.setAttribute(
								KOHLSPCAConstants.A_SHIPMENT_LINE_KEY,
								eScannedItemModel
										.getAttribute(KOHLSPCAConstants.A_SHIPMENT_LINE_KEY));
				Element eShipmentLineInContainerDetail = YRCXmlUtils
						.createChild(eAddNewItemToContainerDetail,
								KOHLSPCAConstants.E_SHIPMENT_LINE);
				eShipmentLineInContainerDetail.setAttribute(
						KOHLSPCAConstants.A_ITEM_DESC, eScannedItemModel
								.getAttribute(KOHLSPCAConstants.A_ITEM_DESC));
				
				if(doImport)
					YRCXmlUtils.importElement(eCurrentContainerSource,eAddNewItemToContainerDetails);
				
			
				
			}
			
			//dfasf
			
			NodeList nlContainerItems=eCurrentContainerSource.getElementsByTagName(KOHLSPCAConstants.A_CONTAINER_DETAIL);
			
			String strIsNewContainer = eCurrentContainerSource
			.getAttribute(KOHLSPCAConstants.A_IS_NEW_CONTAINER);
			
			if (!YRCPlatformUI.isVoid(strIsNewContainer)
					&& YRCPlatformUI.equals(strIsNewContainer,
							KOHLSPCAConstants.FLAG_Y)
					) {
				disableField("btnReprintLabel");
				if(nlContainerItems.getLength() > 0){
				enableField("btnCloseContainer");
				enableField("packContainerComposite");
				enableField("btnRemoveContainer");
				}else{
					
					disableField("btnCloseContainer");
					enableField("packContainerComposite");
					disableField("btnRemoveContainer");
					
				}
			}
		     

			repopulateModel("CurrentContainerSource");

		}

	}

	private void updateContainerNetWeight(Element currentContainerSource,
			Element scannedItemModel) {
		
		

		String strItemUnitWeight = "0.00";

		String strItemID = scannedItemModel
				.getAttribute(KOHLSPCAConstants.A_ITEM_ID);

		strItemUnitWeight = (String) YRCXPathUtils
				.evaluate(
						scannedItemModel,
						"/Shipment/ShipmentLines/ShipmentLine[@ItemID='"
								+ strItemID
								+ "']/OrderLine/ItemDetails/PrimaryInformation/@UnitWeight",
						XPathConstants.STRING);

		if (!YRCPlatformUI.isVoid(strItemUnitWeight)) {

			if (checkIfDouble(strItemUnitWeight)) {

				Double dContainerWt = YRCXmlUtils.getDoubleAttribute(
						currentContainerSource,
						KOHLSPCAConstants.A_CONTAINER_NET_WT);

				if (YRCPlatformUI.isVoid(dContainerWt)) {

					currentContainerSource.setAttribute(
							KOHLSPCAConstants.A_CONTAINER_NET_WT, "0.00");

				} else {

					dContainerWt = dContainerWt
							+ Double.parseDouble(strItemUnitWeight);
					currentContainerSource.setAttribute(
							KOHLSPCAConstants.A_CONTAINER_NET_WT, Double
									.toString(dContainerWt));

				}

			}

		}

	}

	private int validateScannedItem(Element eOutputTranslateBarCode,
			Element eShipmentLineModel) {

		Element eTranslations = YRCXmlUtils.getChildElement(
				eOutputTranslateBarCode, KOHLSPCAConstants.E_TRANSLATIONS);

		String strTotalNumberOfRecords = eTranslations
				.getAttribute(KOHLSPCAConstants.A_TOTAL_NUMBER_OF_RECORDS);

		if (YRCPlatformUI.equals(strTotalNumberOfRecords, "0")) {

			return STATUS_INVALID_ITEM; // Item does not exist in the catalog
		} else {
			
			Element eTranslation = YRCXmlUtils.getChildElement(eTranslations,
					KOHLSPCAConstants.E_TRANSLATION);
			Element eItemContextualInfo = YRCXmlUtils.getChildElement(
					eTranslation, KOHLSPCAConstants.A_ITEM_CONTEXTUAL_INFO);
			String strItemID = eItemContextualInfo
					.getAttribute(KOHLSPCAConstants.A_ITEM_ID);
			
			//Add logic to detect whether scanned UPC code is Container or SKU, if it is container then update the container type combo accordingly
			
			if(isContainerTypeItem(strItemID)){
				
				defaultMultiContainerType(getModel("getItemListForContainerType_Output"), strItemID);
				repopulateModel("getItemListForContainerType_Output");
				return STATUS_VALID_CONTAINER_ITEM_SCANNED;
				
			}
			
			
		else {
               // This else block check whether scan UPC code is valid SKU item or not

			NodeList nShipmentLine = (NodeList) YRCXPathUtils.evaluate(
					eShipmentLineModel,
					"/Shipment/ShipmentLines/ShipmentLine[@ItemID='"
							+ strItemID + "']", XPathConstants.NODESET);

			if (!YRCPlatformUI.isVoid(nShipmentLine)
					&& nShipmentLine.getLength() > 0) {

				boolean boolIsValidItemAlreadyPacked = false;
				boolean boolIsValidItemToPack = false;

				for (int j = 0; j < nShipmentLine.getLength(); j++) {
					Element eShipmentLine = (Element) nShipmentLine.item(j);

					double dPlacedQuantity = YRCXmlUtils.getDoubleAttribute(
							eShipmentLine, KOHLSPCAConstants.A_PLACED_QUANTITY);
					double dQuantity = YRCXmlUtils.getDoubleAttribute(
							eShipmentLine, KOHLSPCAConstants.A_QUANTITY);

					if (dPlacedQuantity < dQuantity) {

						dPlacedQuantity++;
						eShipmentLine.setAttribute(
								KOHLSPCAConstants.A_PLACED_QUANTITY, Double
										.toString(dPlacedQuantity));

						Double dQuantityToPack = YRCXmlUtils
								.getDoubleAttribute(eShipmentLine,
										KOHLSPCAConstants.A_QUANTITY_TO_PACK);
						dQuantityToPack--;
						eShipmentLine.setAttribute(
								KOHLSPCAConstants.A_QUANTITY_TO_PACK, Double
										.toString(dQuantityToPack));
						boolIsValidItemToPack = true;
						setModel("NewlyScannedShipmentItem", eShipmentLine);
						break;

					} else {

						boolIsValidItemAlreadyPacked = true;
						continue;

					}

				}

				if (boolIsValidItemToPack) {
					return STATUS_VALID_ITEM_TO_PACK; // valid item and needs
														// to be packed
				} else if (boolIsValidItemAlreadyPacked) {
					return STATUS_VALID_ITEM_ALREADY_PACKED; // valid item
																// but all items
																// in Shipment
																// with this
																// ItemID are
																// packed
				}

			}

			else {
				return STATUS_VALID_ITEM_NOT_IN_SHIPMENT; // item exists but
															// not part of
															// shipment
			}

		}
	}
		return STATUS_INVALID_ITEM; // item does not exist in the system,rescan

	}

	private boolean isContainerTypeItem(String strItemID) {
		boolean flag=false;
		
		Element eleGetContainerItemList=getModel("getItemListForContainerType_Output");
		
		if(!YRCPlatformUI.isVoid(eleGetContainerItemList)){
			
			Element eleGetContainerItem = (Element)YRCXPathUtils.evaluate(
					eleGetContainerItemList,
					"/Shipment/ItemList/Item[@ItemID='"
							+ strItemID + "']", XPathConstants.NODE);
			
			if(!YRCPlatformUI.isVoid(eleGetContainerItem)){
				flag=true;
			}
			
		}
			
		return flag;
	}

	private void calculateQtyToBePacked(NodeList nShipmentLineList) {

		for (int intShipmentLineCount = 0; intShipmentLineCount < nShipmentLineList
				.getLength(); intShipmentLineCount++) {
			Element eShipmentLine = (Element) nShipmentLineList
					.item(intShipmentLineCount);
			if (!YRCPlatformUI.isVoid(eShipmentLine)) {

				Double dPlacedQty = YRCXmlUtils.getDoubleAttribute(
						eShipmentLine, KOHLSPCAConstants.A_PLACED_QUANTITY);
				Double dQuantity = YRCXmlUtils.getDoubleAttribute(
						eShipmentLine, KOHLSPCAConstants.A_QUANTITY);
				eShipmentLine.setAttribute(
						KOHLSPCAConstants.A_QUANTITY_TO_PACK, Double
								.toString(dQuantity - dPlacedQty));

			}
		}

	}

	public void searchShipmentLineList() {

		if (YRCPlatformUI.equals(getFieldValue("txtScanShipmentNo").trim(), "")) {
			return;
		}
		else {
			
			
			
			boolean boolCanShowNewShipment=false;
			
			Element eleExistingShipmentModel=getModel("getShipmentDetailsForPackShipment");
			
			//check if there is shipment already populated on the pack shipment screen
			
			if(!YRCPlatformUI.isVoid(eleExistingShipmentModel)){
				
				String strShipmentContainerizedFlag=eleExistingShipmentModel.getAttribute(KOHLSPCAConstants.A_SHIPMENT_CONTAINERIZED_FLAG);
				
				//if there is shipment on the screen but it is already in packed status then allow api call to validate newly scanned shipment
				
				if(strShipmentContainerizedFlag.equalsIgnoreCase(KOHLSPCAConstants.V_SHIPMENT_PACKED)){
					
					boolCanShowNewShipment=true;
					
				}else{
					
					//if there is shipment on the screen but it is not yet completely packed then ask packer if he want to pack new shipment
					//If packer wants to pack new shipment then allow api call to validate newly scanned shipment
					//else if packer wants to continue packing then blank out new shipment scanned and suppress api call
					
					/*boolCanShowNewShipment=YRCPlatformUI.getConfirmation(YRCPlatformUI.getString("TITLE_PACK_SHIPMENT_CONFIRMATION"), YRCPlatformUI.getString("MSG_PACK_SHIPMENT_CONFIRMATION"));
				   
					if(!boolCanShowNewShipment){
						
						//if Packer wants to continue with packing then blank out new shipment scanned 
						// and set focus on scan upc code text box to continue packing.
						setFieldValue("txtScanShipmentNo", "");
				    	getControl("txtItemID").setFocus();				  
				    }	*/
					
				}
				
				
			}
			
			else {
				//if packer has just opened the Pack Shipment screen and scanned a new shipment then allow api call to validate newly scanned shipment
				boolCanShowNewShipment=true;
			}
			
			if(boolCanShowNewShipment){
			Element eInputGetShipmentLineList = getTargetModel("getShipmentLineList_Input");
			
			eInputGetShipmentLineList.setAttribute(KOHLSPCAConstants.A_SHIP_NODE, KOHLSPCAUtils.getCurrentStore());
			Document docInputGetShipmentLineList = eInputGetShipmentLineList
					.getOwnerDocument();
			callApi(KOHLSPCAApiNames.API_GET_SHIPMENT_DETAILS_FOR_PC,
					docInputGetShipmentLineList);
			}
		}
		
		
		
	}
	
	public void searchShipmentLineList(String strShipmentNo) {

		Document docShipmentListInput=YRCXmlUtils.createDocument(KOHLSPCAConstants.E_SHIPMENT);
		
		docShipmentListInput.getDocumentElement().setAttribute(KOHLSPCAConstants.A_SHIP_NODE, KOHLSPCAUtils.getCurrentStore());
		docShipmentListInput.getDocumentElement().setAttribute(KOHLSPCAConstants.A_SHIPMENT_NO, strShipmentNo);
	
		callApi(KOHLSPCAApiNames.API_GET_SHIPMENT_DETAILS_FOR_PC,
				docShipmentListInput);
	}

	/**
	 * Calls TranslateBarCode API
	 * 
	 * @param text -
	 *            scanned for itemId
	 */

	protected void translateBarCode(String text) {
		String itemId = "";
		if (YRCPlatformUI.equals(text, itemId)) {
			return;
		}
		itemId = text;
		
		
		if(YRCPlatformUI.equals(itemId, KOHLSPCAConstants.V_CLOSE_CONTAINER_BARCODE)){
			
				YRCPlatformUI.fireAction(KOHLSPackShipmentContainerCloseAction.ACTION_ID);
				setFieldValue("txtItemID", "");
				getControl("txtItemID").setFocus();
				return;
	
		}
		else {
			String strEnterpriseCode = getEnterpriseCodeForStoreUser();
		if (isBarCodeTranslationAllowed()) {
			Document docInputForTranslateBarCode = KOHLSInputXMLUtils
					.getInputForTranslateBarCodeApi(text,
							KOHLSPCAConstants.V_CATALOG_ENTERPRISE,
							strEnterpriseCode);
			callApi(KOHLSPCAApiNames.API_TRANSLATE_BAR_CODE,
					docInputForTranslateBarCode);
		} else {

			// if the translate bar code is not allowed call
			// callCompleteItemList() api with itemId
			// callCompleteItemList();

		}
		}
	}

	private boolean isBarCodeTranslationAllowed() {
		// TODO
		// call getRuleDetails api to decide the value of rule
		// SOP_CALL_TRANSLATE_BAR_CODE_API
		// return "Y".equals(getRule("SOP_CALL_TRANSLATE_BAR_CODE_API"));

		return true;
	}

	private String getEnterpriseCodeForStoreUser() {
		String strEnterpriseCode = YRCPlatformUI.getUserElement().getAttribute(
				KOHLSPCAConstants.A_ENTERPRISE_CODE);

		if (!YRCPlatformUI.isVoid(strEnterpriseCode))
			return strEnterpriseCode;
		else
			return KOHLSPCAConstants.V_CATALOG_ENTERPRISE;
	}

	public void callApi(String name, Document inputXml) {
		YRCApiContext context = new YRCApiContext();
		context.setApiName(name);
		context.setFormId(WIZARD_ID);
		context.setInputXml(inputXml);
		callApi(context);
	}

	public void updateContainerDetailsTable(String strContainerNo) {

		setFieldValue("txtContainerNo", getFieldValue("cmbCtnDetailsNo"));

		if (YRCPlatformUI.equals(strContainerNo, "")) {
			
			disableField("btnRemoveContainer");
			disableField("btnCloseContainer");
			disableField("packContainerComposite");
			
			Element eBlankContainer = YRCXmlUtils.createDocument(
					KOHLSPCAConstants.E_CONTAINER).getDocumentElement();	
			setModel("CurrentContainerSource", eBlankContainer);
			repopulateModel("CurrentContainerSource");
			return;
		} else {

			Element eContainers = getModel("Containers");
			if (!YRCPlatformUI.isVoid(eContainers)) {

				Element eCurrentContainer = (Element) YRCXPathUtils.evaluate(
						eContainers,
						"/Shipment/Containers/Container[@ContainerNo='"
								+ strContainerNo + "']", XPathConstants.NODE);
				
			

				if (!YRCPlatformUI.isVoid(eCurrentContainer)) {
					
					String strContainerType;
					
					if(getIsSingleShipment()){
						strContainerType=getSingleShipmentContainerTypeID();
					}
					else 
						strContainerType=KOHLSPCAUtils.getDefaultMultiContainerTypeID();
					
					String strIsNewContainer = eCurrentContainer
					.getAttribute(KOHLSPCAConstants.A_IS_NEW_CONTAINER);
					
					//check container has items
					
					Element eleCurrentSourceContainer=getModel("CurrentContainerSource");
					
					Element elePackShipmentDetails= getModel("getShipmentDetailsForPackShipment");
					
					NodeList nlContainerItems=eleCurrentSourceContainer.getElementsByTagName(KOHLSPCAConstants.A_CONTAINER_DETAIL);
					

					
					if (!YRCPlatformUI.isVoid(strIsNewContainer)
							&& YRCPlatformUI.equals(strIsNewContainer,
									KOHLSPCAConstants.FLAG_Y)
							) {
						disableField("btnReprintLabel");
						if(!YRCPlatformUI.isVoid(KOHLSPCAUtils.getDefaultPackStationID()))
                        {
						eCurrentContainer.setAttribute(KOHLSPCAConstants.A_COMMITMENT_CODE, KOHLSPCAUtils.getDefaultPackStationID());
                        }


						if(nlContainerItems.getLength() > 0){
						enableField("btnCloseContainer");
						enableField("packContainerComposite");
						enableField("btnRemoveContainer");
						}else{
							
							disableField("btnCloseContainer");
							enableField("packContainerComposite");
							disableField("btnRemoveContainer");
							
						}
						
						defaultMultiContainerType(getModel("getItemListForContainerType_Output"), strContainerType);
					    repopulateModel("getItemListForContainerType_Output");
						

					} else {
						
					    String strFormIDContainerType=eCurrentContainer.getAttribute(KOHLSPCAConstants.A_FORM_ID);
					    
					    defaultMultiContainerType(getModel("getItemListForContainerType_Output"), strFormIDContainerType);
					   repopulateModel("getItemListForContainerType_Output");
						/*30 min void shipment Fix Start*/
					   //if("Y".equals(elePackShipmentDetails.getAttribute("IsPackProcessComplete"))){
						 //  disableField("btnRemoveContainer");
					   //}else{
						enableField("btnRemoveContainer");
					   //}
					   /*30 min void shipment Fix End*/
						disableField("btnCloseContainer");
						disableField("packContainerComposite");
						enableField("btnReprintLabel");
					}
					
					setModel("CurrentContainerSource", eCurrentContainer);
					repopulateModel("CurrentContainerSource");
					
					
					
				
				}

			}

		}

		getControl("txtItemID").setFocus();

	}

	public void closeContainer() {
		
		Element eleContainerToClose=getModel("CurrentContainerSource");
		
		if(YRCPlatformUI.isVoid(eleContainerToClose)){
			YRCPlatformUI.showInformation(YRCPlatformUI.getString("INFO"), YRCPlatformUI.getString("INFO_CANNOT_CLOSE_EMPTY_CONTAINER"));
			return;
		}
		
		NodeList nlContainerDetail=eleContainerToClose.getElementsByTagName(KOHLSPCAConstants.A_CONTAINER_DETAIL);
		
		if(!YRCPlatformUI.isVoid(nlContainerDetail) && nlContainerDetail.getLength() > 0){
			callApi(KOHLSPCAApiNames.API_KOHLS_ADD_CONTAINER_TO_SHIPMENT_SERVICE,
					getInputDocToCloseContainer(eleContainerToClose));
		}
		else {
			
			YRCPlatformUI.showInformation(YRCPlatformUI.getString("INFO"), YRCPlatformUI.getString("INFO_CANNOT_CLOSE_EMPTY_CONTAINER"));
		}
	}

	private boolean isValidContainerToClose() {

		Element eShipmentDetailsForPackShipment = getTargetModel("getShipmentDetailsForPackShipment");

		if (YRCPlatformUI.isVoid(eShipmentDetailsForPackShipment)) {
			return false;
		} else {
			String strShipmentKey = eShipmentDetailsForPackShipment
					.getAttribute(KOHLSPCAConstants.A_SHIPMENT_KEY);

			if (!YRCPlatformUI.equals(strShipmentKey, "")) {
				return true;
			} else {
				return false;
			}
		}

	}

	private Document createAddToContainerInput() {
		Element eCurrentContainerToClose = getModel("CurrentContainerSource");

		Element eCurrentContainer = getTargetModel("CurrentContainer");

		Element eShipmentDetailsForPackShipment = getModel("getShipmentDetailsForPackShipment");

		String strShipmentKey = eShipmentDetailsForPackShipment
				.getAttribute(KOHLSPCAConstants.A_SHIPMENT_KEY);

		if (!YRCPlatformUI.isVoid(eCurrentContainerToClose)
				&& !YRCPlatformUI.isVoid(eCurrentContainer)) {

			String strContainerType = eCurrentContainer
					.getAttribute(KOHLSPCAConstants.A_CONTAINER_TYPE);

			if (!YRCPlatformUI.isVoid(strContainerType)
					&& YRCPlatformUI.equals(strContainerType.trim(), "")) {
				eCurrentContainerToClose.setAttribute(
						KOHLSPCAConstants.A_CONTAINER_TYPE, strContainerType);
				eCurrentContainerToClose.setAttribute(
						KOHLSPCAConstants.A_SHIPMENT_KEY, strShipmentKey);
				eCurrentContainerToClose.setAttribute(
						KOHLSPCAConstants.A_IS_PACK_PROCESS_COMPLETE,
						KOHLSPCAConstants.FLAG_Y);
				eCurrentContainerToClose.setAttribute(
						KOHLSPCAConstants.A_ADDING_COMPLETE,
						KOHLSPCAConstants.FLAG_Y);
			} else {

				addFieldInError("cmbContainerType", YRCPlatformUI
						.getString("ERROR_SELECT_CONTAINER_TYPE"));
				return null;
			}

		}

		return eCurrentContainer.getOwnerDocument();

	}

	/**
	 * Validates if input String is a number
	 */
	public boolean checkIfDouble(String dUnitWt) {

		try {

			Double.parseDouble(dUnitWt);

		} catch (NumberFormatException ex) {
			return false;
		}

		return true;
	}
	

	public void removeContainer() {
		
		//New Container
		
		Element eleContainerToRemove=getModel("CurrentContainerSource");
		
		if(!YRCPlatformUI.isVoid(eleContainerToRemove)){
		
		if(YRCPlatformUI.equals(eleContainerToRemove.getAttribute(KOHLSPCAConstants.A_IS_NEW_CONTAINER),KOHLSPCAConstants.FLAG_Y)){
			
			Element eleShipment=getModel("getShipmentDetailsForPackShipment");
			
			if(!YRCPlatformUI.isVoid(eleShipment)){
				String strShipmentNo=eleShipment.getAttribute(KOHLSPCAConstants.A_SHIPMENT_NO);
				searchShipmentLineList(strShipmentNo);
			}
				
			}
		else {
			
			callApi(KOHLSPCAApiNames.API_KOHLS_ADD_CONTAINER_TO_SHIPMENT_SERVICE, getInputDocToRemoveContainer(eleContainerToRemove));
			
		}
			
		}
		
	}

	private Document getInputDocToRemoveContainer(Element eleContainerToRemove) {
		
          Document docInputToRemoveContainer=YRCXmlUtils.createDocument(KOHLSPCAConstants.E_SHIPMENT);
          
          Element eleInputToRemoveContainer=docInputToRemoveContainer.getDocumentElement();
          
          Element eShipmentDetailsForPackShipment = getModel("getShipmentDetailsForPackShipment");
          
          Element eleShipNode=YRCXmlUtils.getChildElement(eShipmentDetailsForPackShipment, KOHLSPCAConstants.E_SHIP_NODE, true);
      	
          Element eleShipNodeForCloseContainer = (Element) docInputToRemoveContainer.importNode(eleShipNode, true);
  		
          docInputToRemoveContainer.getDocumentElement().appendChild(eleShipNodeForCloseContainer);

  		  String strShipmentKey = eShipmentDetailsForPackShipment
  				.getAttribute(KOHLSPCAConstants.A_SHIPMENT_KEY);
  		
  		  eleInputToRemoveContainer.setAttribute(
				KOHLSPCAConstants.A_SHIPMENT_KEY, strShipmentKey);
  		  
  		 Element eleContainers=YRCXmlUtils.createChild(eleInputToRemoveContainer, KOHLSPCAConstants.E_CONTAINERS);
  		 
  		  
  		if (!YRCPlatformUI.isVoid(eleContainerToRemove)) {	
  			
  			Element eleRemoveContainer = (Element) docInputToRemoveContainer.importNode(eleContainerToRemove, true);
  				
  			eleContainers.appendChild(eleRemoveContainer);
  			
  			eleRemoveContainer.setAttribute(KOHLSPCAConstants.A_ACTION, KOHLSPCAConstants.V_DELETE);
				

		}
		
          return docInputToRemoveContainer;
          

	}
	
	
	private Document getInputDocToCloseContainer(Element eleContainerToClose) {
		
        Document docInputToRemoveContainer=YRCXmlUtils.createDocument(KOHLSPCAConstants.E_SHIPMENT);
        
        Element eleInputToRemoveContainer=docInputToRemoveContainer.getDocumentElement();
        
        Element eShipmentDetailsForPackShipment = getModel("getShipmentDetailsForPackShipment");
        
        //TODO
        
        Element eleShipNode=YRCXmlUtils.getChildElement(eShipmentDetailsForPackShipment, KOHLSPCAConstants.E_SHIP_NODE, true);
    	
        Element eleShipNodeForCloseContainer = (Element) docInputToRemoveContainer.importNode(eleShipNode, true);
		
        docInputToRemoveContainer.getDocumentElement().appendChild(eleShipNodeForCloseContainer);
        
        //Start changes for SFS June Release
		
		String strcltprngval="";
        
        strcltprngval=KOHLSSIMPropertiesPageBehavior.strCollatePrintingFlag;
		
		if(strcltprngval.isEmpty() && strcltprngval!=null)
        {
        	strcltprngval=KohlsApplicationInitializer.strCollatePrintingFlag;
        }
        
        if(!strcltprngval.isEmpty() && strcltprngval.equalsIgnoreCase("Y") && strcltprngval!=null)
        {
        	docInputToRemoveContainer.getDocumentElement().setAttribute("IsCollateFlag", strcltprngval);
        }
        
      
        
        //End changes for SFS June Release
        

		  String strShipmentKey = eShipmentDetailsForPackShipment
				.getAttribute(KOHLSPCAConstants.A_SHIPMENT_KEY);
		  String strShipmentType = eShipmentDetailsForPackShipment
			.getAttribute(KOHLSPCAConstants.A_SHIPMENT_TYPE);
		  
		  eleInputToRemoveContainer.setAttribute(
					KOHLSPCAConstants.A_SHIPMENT_KEY, strShipmentKey);
		  eleInputToRemoveContainer.setAttribute(
					KOHLSPCAConstants.A_SHIPMENT_TYPE, strShipmentType);
		 
		  eleInputToRemoveContainer.setAttribute(
					KOHLSPCAConstants.A_PRINTER_ID, getPackPrinterID());
		  
		  
		  
		  String strContainerScm=eleContainerToClose.getAttribute(KOHLSPCAConstants.A_CONTAINER_NO);
		  
		  setLatestContainerNo(eleContainerToClose.getAttribute(KOHLSPCAConstants.A_CONTAINER_NO));
		  
		 
		  Element eleContainers=YRCXmlUtils.createChild(eleInputToRemoveContainer, KOHLSPCAConstants.E_CONTAINERS);
		 
		  eleContainerToClose.setAttribute(KOHLSPCAConstants.A_CONTAINER_SCM, strContainerScm);
		  
		
	      Element eleInputCloseContainer=(Element)eleContainerToClose.cloneNode(true);
	      
	      YRCXmlUtils.importElement(eleContainers, eleInputCloseContainer);
	      
	       /* ProShip Integration Changes Start */
	      Element eleCurrentContainer = getModel("CurrentContainerSource");
	      
	      Element elePrimaryInfo = null;
	      String strContainerType = eleCurrentContainer.getAttribute("ContainerType");
	      Element eleContainerList = getModel("getItemListForContainerType_Output");
	      ArrayList<Element> arrItemList = YRCXmlUtils.getChildren(eleContainerList, "Item");
	      if(arrItemList.size() > 0){
	    	  for(int i=0; i<arrItemList.size(); i++){
	    		  Element eleItem = arrItemList.get(i);
	    		  String strItemID = eleItem.getAttribute("ItemID");
	    		  if(strItemID.equals(strContainerType)){
	    			  elePrimaryInfo = YRCXmlUtils.getChildElement(eleItem, "PrimaryInformation");
	    		  }
	    	  }
	      }
	      stampContainerLevelAttributes(docInputToRemoveContainer ,elePrimaryInfo);
          
          Document docMerged = YRCXmlUtils.createDocument("MergedDocument");
          Element eleMergedDocument = docMerged.getDocumentElement();
          
          Element eleShipmentDetails = getModel("getShipmentDetailsForPackShipment");
          
          Element eleShipmentDoc = YRCXmlUtils.createChild(eleMergedDocument, "ShipmentDocument");
          YRCXmlUtils.importElement(eleShipmentDoc, eleShipmentDetails);
          
          Element eleInputDoc = YRCXmlUtils.createChild(eleMergedDocument, "InputDocument");
          YRCXmlUtils.importElement(eleInputDoc, docInputToRemoveContainer.getDocumentElement());
        return docMerged;
		/* ProShip Integration Changes End */
	}

	/* ProShip Integration Changes Start */
	private void stampContainerLevelAttributes(Document docInputToRemoveContainer, Element elePrimaryInfo) {
		// TODO Auto-generated method stub
		Element eleShipment = docInputToRemoveContainer.getDocumentElement();
		Element eleContainers = YRCXmlUtils.getChildElement(eleShipment, KOHLSPCAConstants.E_CONTAINERS);
		Element eleContainer = YRCXmlUtils.getChildElement(eleContainers, KOHLSPCAConstants.E_CONTAINER);
		
		eleContainer.setAttribute("ActualWeightUOM", elePrimaryInfo.getAttribute("UnitWeightUOM"));
		eleContainer.setAttribute("ContainerGrossWeightUOM", elePrimaryInfo.getAttribute("UnitWeightUOM"));
		eleContainer.setAttribute("ContainerHeight", elePrimaryInfo.getAttribute("UnitHeight"));
		eleContainer.setAttribute("ContainerHeightUOM", elePrimaryInfo.getAttribute("UnitHeightUOM"));
		eleContainer.setAttribute("ContainerLength", elePrimaryInfo.getAttribute("UnitLength"));
		eleContainer.setAttribute("ContainerLengthUOM", elePrimaryInfo.getAttribute("UnitLengthUOM"));
		eleContainer.setAttribute("ContainerWidth", elePrimaryInfo.getAttribute("UnitWidth"));
		eleContainer.setAttribute("ContainerWidthUOM", elePrimaryInfo.getAttribute("UnitWidthUOM"));
	}
	/* ProShip Integration Changes End */

	private void setLatestContainerNo(String strContainerNo) {
		strLatestContainerNo=strContainerNo;
		
	}
	
	private String getLatestContainerNo() {
		return strLatestContainerNo;
		
	}

	public void recordShortage(String strReasonCode) {
		
		boolean flag=true;
		
		Element eCurrentContainerSource=getModel("Containers");
		
		if(!YRCPlatformUI.isVoid(eCurrentContainerSource)){
			
			
			
			Element eleOpenContainer = (Element) YRCXPathUtils.evaluate(eCurrentContainerSource,
					"/Shipment/Containers/Container[@IsNewContainer='Y']", XPathConstants.NODE);
			
			if(!YRCPlatformUI.isVoid(eleOpenContainer)) {
				
				String strContainerNo=eleOpenContainer.getAttribute(KOHLSPCAConstants.A_CONTAINER_NO);
				
				NodeList nlContainerDetailList=eleOpenContainer.getElementsByTagName(KOHLSPCAConstants.E_CONTAINER_DETAIL);
				
				if(!YRCPlatformUI.isVoid(nlContainerDetailList) && nlContainerDetailList.getLength() > 0){
					
					flag=false;
					
					YRCPlatformUI.showError(YRCPlatformUI.getString("ERROR"),YRCPlatformUI.getFormattedString(YRCPlatformUI.getString("ERROR_CANNOT_RECORD_SHORTAGE_OPEN_CONTAINER"),
							new String[]{strContainerNo}));
					
				}
				
				
			}
			
			
			
		}
		
		if(flag){
		
		 Element eShipmentDetails = getModel("getShipmentDetailsForPackShipment");
		 
		 if(!YRCPlatformUI.isVoid(eShipmentDetails)){
			 
			 
			 String strShipmentStatus = eShipmentDetails
				.getAttribute(
						KOHLSPCAConstants.A_STATUS);


		boolean isValidStatusForPacking = YRCPlatformUI.equals(strShipmentStatus,
				KOHLSPCAConstants.STATUS_SHIPMENT_PICK_LIST_PRINTED) ||
				YRCPlatformUI.equals(strShipmentStatus,
								KOHLSPCAConstants.STATUS_SHIPMENT_PACK_IN_PROGRESS);
		
		if(isValidStatusForPacking){
			
			callApi(KOHLSPCAApiNames.API_KOHLS_MODIFY_STORE_SHIPMENT,createInputToRecordShortage(eShipmentDetails, strReasonCode));
		}
		else{
			
			YRCPlatformUI.showError(YRCPlatformUI.getString("ERROR"),YRCPlatformUI.getString("ERROR_INCORRECT_RECORD_SHORTAGE_STATUS"));
			
		}
		
			 
		 }else{
			 YRCPlatformUI.setMessage("No valid shipment found to record shortage");
		 }
		
		}
		
		
	}

	private Document createInputToRecordShortage(Element eShipmentDetails, String strReasonCode) {
		
		
       Document docInputToRecordShortage=YRCXmlUtils.createDocument(KOHLSPCAConstants.E_SHIPMENT);
        
        Element eleInputToRecordShortage=docInputToRecordShortage.getDocumentElement();
        if(!YRCPlatformUI.isVoid(eShipmentDetails)){
        	
        	  String strShipmentKey = eShipmentDetails
				.getAttribute(KOHLSPCAConstants.A_SHIPMENT_KEY);
		  
        	  eleInputToRecordShortage.setAttribute(
					KOHLSPCAConstants.A_SHIPMENT_KEY, strShipmentKey);
        	  
        	  eleInputToRecordShortage.setAttribute(
  					KOHLSPCAConstants.A_BACKORDERED_REMOVED_QTY,KOHLSPCAConstants.FLAG_Y);
        	  
        	  eleInputToRecordShortage.setAttribute(
  					KOHLSPCAConstants.A_ORGANIZATION_CODE, eShipmentDetails.getAttribute(KOHLSPCAConstants.A_ENTERPRISE_CODE));
        	  //Added by Zubair -begin//
        	  eleInputToRecordShortage.setAttribute(
    					KOHLSPCAConstants.A_SHIP_NODE, eShipmentDetails.getAttribute(KOHLSPCAConstants.A_SHIP_NODE));
        	  //Added by Zubair-end//
        	  Element eleShipmentLines=YRCXmlUtils.createChild(eleInputToRecordShortage, KOHLSPCAConstants.E_SHIPMENT_LINES);
        	  // Added by Zubair -begin//
        	  eleShipmentLines.setAttribute("Replace", "Y");
        	  //Added by Zubair-end//
        	  Element eleOriginalShipmentLines=YRCXmlUtils.getChildElement(eShipmentDetails, KOHLSPCAConstants.E_SHIPMENT_LINES);
        	  
        	/*Element eleShipmentStatusAudit = YRCXmlUtils.createChild(eShipmentDetails, "ShipmentStatusAudit");
        	  eleShipmentStatusAudit.setAttribute("ReasonCode", strReasonCode);
        	  
        	  Element eleContainers = YRCXmlUtils.createChild(eShipmentDetails, KOHLSPCAConstants.E_CONTAINERS);
        	  Element eleContainer = YRCXmlUtils.createChild(eleContainers, KOHLSPCAConstants.E_CONTAINER);
        	  eleContainer.setAttribute(KOHLSPCAConstants.A_SHIPMENT_CONTAINER_KEY, getModel("CurrentContainerSource").getAttribute(KOHLSPCAConstants.A_SHIPMENT_CONTAINER_KEY));
        	  eleContainer.setAttribute("ReasonCode", strReasonCode);
        	  
        	  Element eleContainerStatusAudit = YRCXmlUtils.createChild(eleContainer, "ContainerStatusAudit");
        	  eleContainerStatusAudit.setAttribute("ContainerKey", getModel("CurrentContainerSource").getAttribute(KOHLSPCAConstants.A_SHIPMENT_CONTAINER_KEY));
        	  eleContainerStatusAudit.setAttribute("ReasonCode", strReasonCode);*/
        	  
        	  NodeList nlOriginalShipmentLineList=eleOriginalShipmentLines.getElementsByTagName(KOHLSPCAConstants.E_SHIPMENT_LINE);
        	  
        	  if(!YRCPlatformUI.isVoid(nlOriginalShipmentLineList) && nlOriginalShipmentLineList.getLength() > 0){
        		  
        		  for(int i=0; i < nlOriginalShipmentLineList.getLength(); i++){
        			  
        			  Element eleOriginalShipmentLine=(Element)nlOriginalShipmentLineList.item(i);
        			  
        			  Element eleShipmentLine=YRCXmlUtils.createChild(eleShipmentLines, KOHLSPCAConstants.E_SHIPMENT_LINE);
        			  
        			  eleShipmentLine.setAttribute(KOHLSPCAConstants.A_ACTION, KOHLSPCAConstants.V_ACTION_MODIFY);
        			  
        			  eleShipmentLine.setAttribute(KOHLSPCAConstants.A_SHIPMENT_LINE_KEY,
        					  eleOriginalShipmentLine.getAttribute(KOHLSPCAConstants.A_SHIPMENT_LINE_KEY));
        			  
        			  eleShipmentLine.setAttribute(KOHLSPCAConstants.A_SHIPMENT_LINE_NO,
        					  eleOriginalShipmentLine.getAttribute(KOHLSPCAConstants.A_SHIPMENT_LINE_NO));
        			  
        			  eleShipmentLine.setAttribute(KOHLSPCAConstants.A_QUANTITY,
        					  eleOriginalShipmentLine.getAttribute(KOHLSPCAConstants.A_PLACED_QUANTITY));
        			  //Added by Zubair- begin
        			         			 
        			        			  eleShipmentLine.setAttribute("OrderHeaderKey",
        			         					  eleOriginalShipmentLine.getAttribute("OrderHeaderKey"));
        			  	        			  eleShipmentLine.setAttribute("OrderLineKey",
        			        					  eleOriginalShipmentLine.getAttribute("OrderLineKey"));
        			  	        			  eleShipmentLine.setAttribute(KOHLSPCAConstants.A_QUANTITY_TO_PACK,
        			        					  eleOriginalShipmentLine.getAttribute(KOHLSPCAConstants.A_QUANTITY_TO_PACK));
        			  	        			  //Added by Zubair- end
        			  eleShipmentLine.setAttribute(KOHLSPCAConstants.A_ITEM_ID,
        					  eleOriginalShipmentLine.getAttribute(KOHLSPCAConstants.A_ITEM_ID));
        			  
        			  eleShipmentLine.setAttribute(KOHLSPCAConstants.A_PRODUCT_CLASS,
        					  eleOriginalShipmentLine.getAttribute(KOHLSPCAConstants.A_PRODUCT_CLASS));
        			  
        			  eleShipmentLine.setAttribute(KOHLSPCAConstants.A_UOM,
        					  eleOriginalShipmentLine.getAttribute(KOHLSPCAConstants.A_UOM));   			  
        			  
        		  }
        		  
        		  
        	  }
        	  
        	
        	eleInputToRecordShortage.setAttribute(KOHLSPCAConstants.A_REASON_CODE , strReasonCode);
        }
      
		return docInputToRecordShortage;
	}

//	Drop2 - Reprint Label Functionality
	public void callGetShipmentContainerDetails() {
		
		Element eleContainerInfo = getModel(KOHLSPCAConstants.E_CURRENT_CONTAINER_SOURCE);
		String strShipmentContainerKey = eleContainerInfo.getAttribute(KOHLSPCAConstants.E_SHIPMENT_CONTAINER_KEY);
		
		callApi(KOHLSPCAApiNames.API_KOHLS_GET_SHIPMENT_CONTAINER_DETAILS_SERVICE,
				getInputDocToShipmentContainerDetails(strShipmentContainerKey));

	}
//	Drop2 - Reprint Label Functionality	
	private Document getInputDocToShipmentContainerDetails(String strShipmentContainerKey) {

		Document docInputDocToShipmentContainerDetails = YRCXmlUtils
				.createDocument(KOHLSPCAConstants.CONTAINER);

		Element eleInputDocToShipmentContainerDetails = docInputDocToShipmentContainerDetails
		.getDocumentElement();

		eleInputDocToShipmentContainerDetails.setAttribute(KOHLSPCAConstants.E_SHIPMENT_CONTAINER_KEY, strShipmentContainerKey);		

		return docInputDocToShipmentContainerDetails;
	}

//<!-- Start - Drop2 changes -->
	public Element returnModel(String modelName){
		return getModel(modelName);
	}
	
	/*public void callProShipForCloseContainer(Document docShipmentContainerDetails){

		callApi(KOHLSPCAApiNames.API_KOHLS_INVOKE_PROSHIPPING_WEB_SERVICE_CLOSE, docShipmentContainerDetails);
	}*/

	public void callgetShipmentContainerDetailsForVoid(Document inDoc) {
		// TODO Auto-generated method stub

		callApi(KOHLSPCAApiNames.API_KOHLS_GET_CONTAINER_DETAILS_FOR_VOID_CONTAINER, inDoc);
	}

	public void isTAREApplicable(String strEnterpriseCode) {

		// TODO Auto-generated method stub
		Document inDocForCommonCode = YRCXmlUtils.createDocument("CommonCode");
		Element eleInput = inDocForCommonCode.getDocumentElement();
		eleInput.setAttribute("OrganizationCode", strEnterpriseCode);
		eleInput.setAttribute("CodeType", YRCPlatformUI.getString("APPLY_TARE_WEIGHT_CH"));
		
		YRCApiContext context = new YRCApiContext();
		context.setApiName(KOHLSPCAApiNames.API_GET_COMMON_CODE_LIST_TARE_APPLY);
		context.setFormId(WIZARD_ID);
		context.setInputXml(inDocForCommonCode);
		callApi(context);
	}
	
	public void saveReasonCode(String strReasonCode) {
		// TODO Auto-generated method stub

		Element eleContainerDetails = getModel("CurrentContainerSource");
		Element eleShipmentDetails = getModel("getShipmentDetailsForPackShipment");
		String strShipmentContainerKey = eleContainerDetails.getAttribute(KOHLSPCAConstants.A_SHIPMENT_CONTAINER_KEY);
		String strShipmentKey= eleShipmentDetails.getAttribute("ShipmentKey");
		//Document inDoc = YRCXmlUtils.createDocument(KOHLSPCAConstants.E_CONTAINER);
		Document inDoc = YRCXmlUtils.createDocument("Shipment");
		Element eleInput = inDoc.getDocumentElement();
		eleInput.setAttribute("Action", "Modify");
		eleInput.setAttribute("ShipmentKey", strShipmentKey);
		Element eleContainers = YRCXmlUtils.createChild(eleInput, "Containers");
		Element eleContainer = YRCXmlUtils.createChild(eleContainers, "Container");
		eleContainer.setAttribute(KOHLSPCAConstants.A_SHIPMENT_CONTAINER_KEY, strShipmentContainerKey);
		eleContainer.setAttribute(KOHLSPCAConstants.A_REASON_CODE, strReasonCode);
		
		callApi(KOHLSPCAApiNames.API_CHANGE_SHIPMENT_CONTAINER_FOR_SAVING_REASON_CODE, inDoc);
	}
	
	private Document createInputForProShip() {
		// TODO Auto-generated method stub
		Element elePackShipmentDetails = getModel("getShipmentDetailsForPackShipment");
		Element eleCurrentContainer = getModel("CurrentContainerSource");
		
		Document inDoc = YRCXmlUtils.createDocument("Container");
		Element eleInput = inDoc.getDocumentElement();
		
		Element eleToAddress = YRCXmlUtils.getChildElement(elePackShipmentDetails, "ToAddress");
		Element eleShipNode = YRCXmlUtils.getChildElement(elePackShipmentDetails, "ShipNode");
		
		
		eleInput.setAttribute("ActualWeight", eleCurrentContainer.getAttribute("ActualWeight"));
		eleInput.setAttribute("ContainerNetWeight", eleCurrentContainer.getAttribute("ContainerNetWeight"));
		eleInput.setAttribute("ContainerNetWeightUOM", eleCurrentContainer.getAttribute("ContainerNetWeightUOM"));
		eleInput.setAttribute("ContainerNo", eleCurrentContainer.getAttribute("ContainerNo"));
		eleInput.setAttribute("ContainerType", eleCurrentContainer.getAttribute("ContainerType"));
		eleInput.setAttribute("ShipmentKey", elePackShipmentDetails.getAttribute("ShipmentKey"));
		
		Element eleInputExtn =  YRCXmlUtils.createDocument("Extn").getDocumentElement();
		eleInputExtn.setAttribute("ExtnLblPrintFormat", eleCurrentContainer.getAttribute("ExtnLblPrintFormat"));
		
		Element eleShipmentInput = YRCXmlUtils.createDocument("Shipment").getDocumentElement();
		eleShipmentInput.setAttribute("ShipmentKey", elePackShipmentDetails.getAttribute("ShipmentKey"));
		eleShipmentInput.setAttribute("ShipmentNo", elePackShipmentDetails.getAttribute("ShipmentNo"));
		eleShipmentInput.setAttribute("EnterpriseCode", elePackShipmentDetails.getAttribute("EnterpriseCode"));
		eleShipmentInput.setAttribute("DocumentType", elePackShipmentDetails.getAttribute("DocumentType"));
		eleShipmentInput.setAttribute("RequestedCarrierServiceCode", elePackShipmentDetails.getAttribute("RequestedCarrierServiceCode"));
		
		Element eleToAddressInput = YRCXmlUtils.createDocument("ToAddress").getDocumentElement();
		eleToAddressInput.setAttribute("AddressLine1", eleToAddress.getAttribute("AddressLine1"));
		eleToAddressInput.setAttribute("AddressLine2", eleToAddress.getAttribute("AddressLine2"));
		eleToAddressInput.setAttribute("City", eleToAddress.getAttribute("City"));
		eleToAddressInput.setAttribute("Country", eleToAddress.getAttribute("Country"));
		eleToAddressInput.setAttribute("DayPhone", eleToAddress.getAttribute("DayPhone"));
		eleToAddressInput.setAttribute("ZipCode", eleToAddress.getAttribute("ZipCode"));
		eleToAddressInput.setAttribute("State", eleToAddress.getAttribute("State"));
		
		Element eleShipNodeInput = YRCXmlUtils.createChild(eleShipmentInput, "ShipNode");
		eleShipNodeInput.setAttribute("ShipnodeKey", eleShipNode.getAttribute("ShipnodeKey"));
		
		return inDoc;
	}

	@Override
	public void initPage() {
		// TODO Auto-generated method stub
		//setPrinterList();
//		set the Default Label Printer from Cache
		setDefaultLablePrinterList();
//		set the Default Pack Printer from Cache
		setDefaultPackPrinterList();
		setDefaultPackStation();
		super.initPage();
	}
	
	private void setDefaultPackStation() {
		
		String strDefaultPackStation1 = KohlsApplicationInitializer.getTerminalPropertyForUISession(strDefaultPackStation);
		if(!YRCPlatformUI.isVoid(strDefaultPackStation1)){
		parent.txtPackStationNo.setText(strDefaultPackStation1);
		}
		else
		{
			YRCPlatformUI.showError(YRCPlatformUI.getString("ERROR"),
					YRCPlatformUI.getString("ERROR_DEFAULT_PACK_STATION"));
		}
	}
	private void callKOHLSInvokeProShippingWebService(Document outputXML) {
		
		YRCApiContext context = new YRCApiContext();
		context.setApiName(KOHLSPCAApiNames.API_KOHLS_INVOKE_PROSHIPPING_WEB_SERVICE_REPRINT);
		context.setFormId(WIZARD_ID);
		context.setInputXml(outputXML);
		callApi(context);
		//getExtnLblPrintFormat();
	}
	
	//
	/*private Document addPrintLabelVal(Document reprintInputXML)
	{	
		
		Element eleContainer = reprintInputXML.getDocumentElement();
		Element eleExtn;
		eleExtn = YRCXmlUtils.getChildElement(eleContainer, "Extn");
		
		if(eleExtn == null)
			eleExtn = YRCXmlUtils.createChild(eleContainer, "Extn");
		eleExtn.setAttribute("ExtnLblPrintFormat", strPrintLabelFormat);	
		
		return reprintInputXML;
	}*/
	//
	/*public void getExtnLblPrintFormat() {
		
		Element eleShipmentDetails = getModel("getShipmentDetailsForPackShipment");
		String strEnterpriseCode = eleShipmentDetails.getAttribute("EnterpriseCode");
		Document inDocForCommonCode = YRCXmlUtils.createDocument("CommonCode");
		Element eleInput = inDocForCommonCode.getDocumentElement();
		eleInput.setAttribute("OrganizationCode", strEnterpriseCode);
		eleInput.setAttribute("CodeType", "EXTN_LBL_PRT_FORMAT");
		
		YRCApiContext context = new YRCApiContext();
		context.setApiName(KOHLSPCAApiNames.API_GET_COMMON_CODE_LIST_PRINT_LABEL);
		context.setFormId(WIZARD_ID);
		context.setInputXml(inDocForCommonCode);
		callApi(context);
	}*/


	private void handleErrorResponseFromProship(Document outputErrorXML) {

		Element eleErrors = outputErrorXML.getDocumentElement();

		Element eleError = YRCXmlUtils.getChildElement(eleErrors, "Error");

		String errorCode = YRCXmlUtils.getAttribute(eleError, "ErrorCode");
		String errorDescription = YRCXmlUtils.getAttribute(eleError, "ErrorDescription");
		String errorRelatedMoreInfo = YRCXmlUtils.getAttribute(eleError, "ErrorRelatedMoreInfo");
		String errorUniqueExceptionId = YRCXmlUtils.getAttribute(eleError, "ErrorUniqueExceptionId");

		YRCPlatformUI.showError("ProShip Error", errorRelatedMoreInfo);
	}

	public void refreshScreenAfterVoidOrClose() {
		// TODO Auto-generated method stub
		Document inDocForShipmentDetails = YRCXmlUtils.createDocument(KOHLSPCAConstants.E_SHIPMENT);
		Element eleInputGetShipmentDetails = inDocForShipmentDetails.getDocumentElement();
		eleInputGetShipmentDetails.setAttribute(KOHLSPCAConstants.A_SHIP_NODE, KOHLSPCAUtils.getCurrentStore());
		eleInputGetShipmentDetails.setAttribute(KOHLSPCAConstants.A_SHIPMENT_KEY, getModel("getShipmentDetailsForPackShipment").getAttribute(KOHLSPCAConstants.A_SHIPMENT_KEY));

		YRCApiContext context = new YRCApiContext();
		context.setApiName(KOHLSPCAApiNames.API_GET_SHIPMENT_DETAILS_FOR_PC);
		context.setFormId(WIZARD_ID);
		context.setInputXml(inDocForShipmentDetails);
		context.setUserData("IsRefresh", "Y");
		callApi(context);
		
		repopulateModel("getItemListForContainerType_Output");
		repopulateModel("CurrentContainer");
		//repopulateModel("getDeviceListLablePrinter");
		repopulateModel("getShipmentLineList_Input");
		repopulateModel("getShipmentDetailsForPackShipment");
		repopulateModel("PrintMultiPackShipment");
		repopulateModel("NewlyScannedShipmentItem");
		repopulateModel("OriginalCurrentContainerSource");
		repopulateModel("getShipmentLineList_Output");
		
		
	}
	
	public void callReprintforcollateaction(Document inDocToLabelPrinter)
	{
		proshiplableresdoc = inDocToLabelPrinter;
		
		Element eleShipmentDetails=getModel("getShipmentDetailsForPackShipment");

		if(!YRCPlatformUI.isVoid(eleShipmentDetails)){

			String strShipmentKey=eleShipmentDetails.getAttribute(KOHLSPCAConstants.A_SHIPMENT_KEY);	
			Document docInputShipmentDetails=YRCXmlUtils.createDocument(KOHLSPCAConstants.E_SHIPMENT);
			docInputShipmentDetails.getDocumentElement().setAttribute(KOHLSPCAConstants.A_SHIPMENT_KEY,strShipmentKey);

			//String strDefaultPrinterID=KOHLSPCAUtils.getDefaultPrinterID();
			//Modified for caching - to send the Default Pack Printer instead of default printer

			String strPackPrinterPrinterID =  KohlsApplicationInitializer.getTerminalPropertyForUISession(KOHLSPCAConstants.INI_PROPERTY_DEFAULT_PACK_PRINTER);
			if(!YRCPlatformUI.isVoid(strPackPrinterPrinterID)){

				docInputShipmentDetails.getDocumentElement().setAttribute(KOHLSPCAConstants.A_PRINTER_ID, strPackPrinterPrinterID);
				callApi(KOHLSPCAApiNames.API_REPRINT_PACK_SLIP_SERVICE,docInputShipmentDetails);
			}else{

				YRCPlatformUI.showError(YRCPlatformUI.getString("ERROR"), YRCPlatformUI.getString("ERROR_PACK_PRINTER_ID"));
			}
		}
	}
	
	
	private String getPackPrinterID() {
		
		String strPackPrinter = getFieldValue("cmbPackPrinter");
		if(!"".equals(strPackPrinter)){
			return strPackPrinter;
		}
		return getPrinterID();
	}
	
	private boolean isSuccess(String strExtnResponse){
		boolean res=false;
		if(!YRCPlatformUI.isVoid(strExtnResponse)){
			int intResponse = Integer.parseInt(strExtnResponse);
			if(intResponse>0){
				res=true;
			}
		}
		return res;
	}
	//	<!-- End - Drop2 changes -->
	
	public void handleComboBoxSelectionForLabelPrinter(Combo cmbLablePrinter) {
		KohlsApplicationInitializer.modifyTerminalPropertyForUISession(strDefaultLablePrinter,cmbLablePrinter.getText());
		
	}

	public void handleComboBoxSelectionForPackPrinter(Combo cmbPackPrinter) {
		KohlsApplicationInitializer.modifyTerminalPropertyForUISession(strDefaultPackPrinter,cmbPackPrinter.getText());
		
		
	}
}